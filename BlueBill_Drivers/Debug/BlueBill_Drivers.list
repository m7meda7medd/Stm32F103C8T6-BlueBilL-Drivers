
BlueBill_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aac  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bdc  08000bdc  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bdc  08000bdc  0000201c  2**0
                  CONTENTS
  4 .ARM          00000000  08000bdc  08000bdc  0000201c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bdc  08000bdc  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bdc  08000bdc  00001bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000be0  08000be0  00001be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000be4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000001c  08000c00  0000201c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000c00  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002114  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000071f  00000000  00000000  00004159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00004878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010e  00000000  00000000  00004a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002172  00000000  00000000  00004b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000013f9  00000000  00000000  00006c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000910c  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001119d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004d4  00000000  00000000  000111e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000116b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bc4 	.word	0x08000bc4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08000bc4 	.word	0x08000bc4

08000170 <Dio_WriteChannel>:
* 				     Level 		 Dio_LevelType
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
Std_ReturnType Dio_WriteChannel(Dio_ChannelType ChannelId , Dio_LevelType Level){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	Std_ReturnType ret = E_OK ;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	u8  pin = ChannelId % PINS_COUNT ;  // < 0 ---> 15 >
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	f003 030f 	and.w	r3, r3, #15
 800018a:	73bb      	strb	r3, [r7, #14]
	Dio_PortType port = ChannelId / PINS_COUNT ;
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	091b      	lsrs	r3, r3, #4
 8000190:	737b      	strb	r3, [r7, #13]
			/* Validate the Pin and the Port */
		 if ((pin < PINS_COUNT) && (port < PORTS_COUNT))
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	2b0f      	cmp	r3, #15
 8000196:	d82e      	bhi.n	80001f6 <Dio_WriteChannel+0x86>
 8000198:	7b7b      	ldrb	r3, [r7, #13]
 800019a:	2b02      	cmp	r3, #2
 800019c:	d82b      	bhi.n	80001f6 <Dio_WriteChannel+0x86>
		 {
			 /* Check the Entered Level */
			 if ((Level != STD_HIGH) && (Level != STD_LOW)){
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d005      	beq.n	80001b0 <Dio_WriteChannel+0x40>
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d002      	beq.n	80001b0 <Dio_WriteChannel+0x40>
				 ret = E_NOT_OK ;
 80001aa:	2301      	movs	r3, #1
 80001ac:	73fb      	strb	r3, [r7, #15]
			 if ((Level != STD_HIGH) && (Level != STD_LOW)){
 80001ae:	e024      	b.n	80001fa <Dio_WriteChannel+0x8a>
			 }
			 else {
				 /* change the Level of the Pin */
			 (STD_HIGH == Level) ? (DIO_PortArr[port]->ODR |= ( BIT_MASK << pin )) :
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d10e      	bne.n	80001d4 <Dio_WriteChannel+0x64>
 80001b6:	7b7b      	ldrb	r3, [r7, #13]
 80001b8:	4a13      	ldr	r2, [pc, #76]	@ (8000208 <Dio_WriteChannel+0x98>)
 80001ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001be:	68d9      	ldr	r1, [r3, #12]
 80001c0:	7bbb      	ldrb	r3, [r7, #14]
 80001c2:	2201      	movs	r2, #1
 80001c4:	409a      	lsls	r2, r3
 80001c6:	7b7b      	ldrb	r3, [r7, #13]
 80001c8:	480f      	ldr	r0, [pc, #60]	@ (8000208 <Dio_WriteChannel+0x98>)
 80001ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80001ce:	430a      	orrs	r2, r1
 80001d0:	60da      	str	r2, [r3, #12]
			 if ((Level != STD_HIGH) && (Level != STD_LOW)){
 80001d2:	e012      	b.n	80001fa <Dio_WriteChannel+0x8a>
					 (DIO_PortArr[port]->ODR &= ~( BIT_MASK << pin )) ;
 80001d4:	7b7b      	ldrb	r3, [r7, #13]
 80001d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000208 <Dio_WriteChannel+0x98>)
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	68d9      	ldr	r1, [r3, #12]
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	2201      	movs	r2, #1
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	43da      	mvns	r2, r3
 80001e8:	7b7b      	ldrb	r3, [r7, #13]
 80001ea:	4807      	ldr	r0, [pc, #28]	@ (8000208 <Dio_WriteChannel+0x98>)
 80001ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80001f0:	400a      	ands	r2, r1
 80001f2:	60da      	str	r2, [r3, #12]
			 if ((Level != STD_HIGH) && (Level != STD_LOW)){
 80001f4:	e001      	b.n	80001fa <Dio_WriteChannel+0x8a>
			 }
		 }
		 else
		 {
			 /* Trap Error */
			ret = E_NOT_OK ;
 80001f6:	2301      	movs	r3, #1
 80001f8:	73fb      	strb	r3, [r7, #15]
		 }
return ret ;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000

0800020c <NVIC_EnableIRQ>:

/**********************************************************************************************************************
 *  LOCAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/
/* Enable IRQn */
void NVIC_EnableIRQ(IRQn_Type IRQn){
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	/* get the index of ISE Register */
	u8 index = 	   IRQn / 32 ;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	095b      	lsrs	r3, r3, #5
 800021a:	73fb      	strb	r3, [r7, #15]
	u8 IRQn_bit =  IRQn % 32 ;
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	73bb      	strb	r3, [r7, #14]

	/* from 0 ---- 31 in the ISER[0] */
	/* from 32 ------ 63 in ISER[1] */
	NVIC_REG->NVIC_ISER[index] |= (BIT_MASK << IRQn_bit) ;
 8000224:	4a08      	ldr	r2, [pc, #32]	@ (8000248 <NVIC_EnableIRQ+0x3c>)
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800022c:	7bbb      	ldrb	r3, [r7, #14]
 800022e:	2201      	movs	r2, #1
 8000230:	409a      	lsls	r2, r3
 8000232:	4805      	ldr	r0, [pc, #20]	@ (8000248 <NVIC_EnableIRQ+0x3c>)
 8000234:	7bfb      	ldrb	r3, [r7, #15]
 8000236:	430a      	orrs	r2, r1
 8000238:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <NVIC_SetPendingIRQ>:

/* Get the Priority of IRQn */
u8 NVIC_GetPriority(IRQn_Type IRQn);

/* Set Pending flag of IRQn */
void NVIC_SetPendingIRQ(IRQn_Type IRQn){
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	/* get the index of ISP Register */
	u8 index = 	   IRQn / 32 ;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	095b      	lsrs	r3, r3, #5
 800025a:	73fb      	strb	r3, [r7, #15]
	u8 IRQn_bit =  IRQn % 32 ;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 031f 	and.w	r3, r3, #31
 8000262:	73bb      	strb	r3, [r7, #14]

	/* from 0 ---- 31 in the ISPR[0] */
	/* from 32 ------ 63 in ISPR[1] */
	NVIC_REG->NVIC_ISPR[index] |= (BIT_MASK << IRQn_bit) ;
 8000264:	4a09      	ldr	r2, [pc, #36]	@ (800028c <NVIC_SetPendingIRQ+0x40>)
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	3340      	adds	r3, #64	@ 0x40
 800026a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800026e:	7bbb      	ldrb	r3, [r7, #14]
 8000270:	2201      	movs	r2, #1
 8000272:	409a      	lsls	r2, r3
 8000274:	4805      	ldr	r0, [pc, #20]	@ (800028c <NVIC_SetPendingIRQ+0x40>)
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	430a      	orrs	r2, r1
 800027a:	3340      	adds	r3, #64	@ 0x40
 800027c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e100 	.word	0xe000e100

08000290 <Port_Init>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

Std_ReturnType Port_Init(const Port_ConfigType* PortCfg ){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	Std_ReturnType ret = E_OK ;
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
	u8 pin , Mode ;
	Port__PortType port  ;

	if (NULL == PortCfg)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d102      	bne.n	80002a8 <Port_Init+0x18>
	{
		/* Error Accessing NULL Pointer */
		ret = E_NOT_OK ;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
 80002a6:	e1c9      	b.n	800063c <Port_Init+0x3ac>

	}
	else
	{

		for (u8 u8_index = 0 ; u8_index <PREDEF_USED_PINS ; u8_index++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	73bb      	strb	r3, [r7, #14]
 80002ac:	e1c2      	b.n	8000634 <Port_Init+0x3a4>
		{
			port =(PortCfg[u8_index].ChannelId)/16 ;
 80002ae:	7bba      	ldrb	r2, [r7, #14]
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	461a      	mov	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4413      	add	r3, r2
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	091b      	lsrs	r3, r3, #4
 80002c2:	737b      	strb	r3, [r7, #13]
			pin = (PortCfg[u8_index].ChannelId)%16 ;
 80002c4:	7bba      	ldrb	r2, [r7, #14]
 80002c6:	4613      	mov	r3, r2
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	4413      	add	r3, r2
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	461a      	mov	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	f003 030f 	and.w	r3, r3, #15
 80002da:	733b      	strb	r3, [r7, #12]
			Mode = (PortCfg[u8_index].Mode) ;
 80002dc:	7bba      	ldrb	r2, [r7, #14]
 80002de:	4613      	mov	r3, r2
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	4413      	add	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	461a      	mov	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4413      	add	r3, r2
 80002ec:	789b      	ldrb	r3, [r3, #2]
 80002ee:	72fb      	strb	r3, [r7, #11]
			switch (port)
 80002f0:	7b7b      	ldrb	r3, [r7, #13]
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	f000 80c0 	beq.w	8000478 <Port_Init+0x1e8>
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	f300 8119 	bgt.w	8000530 <Port_Init+0x2a0>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d002      	beq.n	8000308 <Port_Init+0x78>
 8000302:	2b01      	cmp	r3, #1
 8000304:	d05c      	beq.n	80003c0 <Port_Init+0x130>
 8000306:	e113      	b.n	8000530 <Port_Init+0x2a0>
			{
				case PORT_PORTA :
					if (pin <= PORT_A7)
 8000308:	7b3b      	ldrb	r3, [r7, #12]
 800030a:	2b07      	cmp	r3, #7
 800030c:	d817      	bhi.n	800033e <Port_Init+0xae>
						{

							PORT_GPIOA->CRL &=~(0b1111 << ( pin * 4))  ; /* Clear bits of CRL Register */
 800030e:	4ba4      	ldr	r3, [pc, #656]	@ (80005a0 <Port_Init+0x310>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	7b3a      	ldrb	r2, [r7, #12]
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	210f      	movs	r1, #15
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	43d2      	mvns	r2, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a9f      	ldr	r2, [pc, #636]	@ (80005a0 <Port_Init+0x310>)
 8000322:	400b      	ands	r3, r1
 8000324:	6013      	str	r3, [r2, #0]
							PORT_GPIOA->CRL |=(Mode << (pin * 4) )   ;
 8000326:	4b9e      	ldr	r3, [pc, #632]	@ (80005a0 <Port_Init+0x310>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	7af9      	ldrb	r1, [r7, #11]
 800032c:	7b3a      	ldrb	r2, [r7, #12]
 800032e:	0092      	lsls	r2, r2, #2
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a9a      	ldr	r2, [pc, #616]	@ (80005a0 <Port_Init+0x310>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	e018      	b.n	8000370 <Port_Init+0xe0>
						}
					else
						{
							PORT_GPIOA->CRH &= ~(0b1111 << ((pin-8) * 4) ) ;// Clear Bits
 800033e:	4b98      	ldr	r3, [pc, #608]	@ (80005a0 <Port_Init+0x310>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	7b3a      	ldrb	r2, [r7, #12]
 8000344:	3a08      	subs	r2, #8
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	210f      	movs	r1, #15
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	4611      	mov	r1, r2
 8000352:	4a93      	ldr	r2, [pc, #588]	@ (80005a0 <Port_Init+0x310>)
 8000354:	400b      	ands	r3, r1
 8000356:	6053      	str	r3, [r2, #4]
							PORT_GPIOA->CRH |=   (Mode << ((pin-8) * 4) )   ;
 8000358:	4b91      	ldr	r3, [pc, #580]	@ (80005a0 <Port_Init+0x310>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	7af9      	ldrb	r1, [r7, #11]
 800035e:	7b3a      	ldrb	r2, [r7, #12]
 8000360:	3a08      	subs	r2, #8
 8000362:	0092      	lsls	r2, r2, #2
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a8d      	ldr	r2, [pc, #564]	@ (80005a0 <Port_Init+0x310>)
 800036c:	430b      	orrs	r3, r1
 800036e:	6053      	str	r3, [r2, #4]
						}
					/* Setting Pull Down and Pull Up and Output initialized Values */
					if (IN_PULL == Mode)
 8000370:	7afb      	ldrb	r3, [r7, #11]
 8000372:	2b08      	cmp	r3, #8
 8000374:	d122      	bne.n	80003bc <Port_Init+0x12c>
					{
						switch (PortCfg[u8_index].Pull)
 8000376:	7bba      	ldrb	r2, [r7, #14]
 8000378:	4613      	mov	r3, r2
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	4413      	add	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	461a      	mov	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <Port_Init+0x102>
 800038c:	2b01      	cmp	r3, #1
 800038e:	d00b      	beq.n	80003a8 <Port_Init+0x118>
								break ;
							default :
								// Not Pull Pin
						}
					}
					break ;
 8000390:	e0d0      	b.n	8000534 <Port_Init+0x2a4>
								CLR_BIT(PORT_GPIOA->ODR,pin) ;
 8000392:	4b83      	ldr	r3, [pc, #524]	@ (80005a0 <Port_Init+0x310>)
 8000394:	68da      	ldr	r2, [r3, #12]
 8000396:	7b3b      	ldrb	r3, [r7, #12]
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43db      	mvns	r3, r3
 80003a0:	497f      	ldr	r1, [pc, #508]	@ (80005a0 <Port_Init+0x310>)
 80003a2:	4013      	ands	r3, r2
 80003a4:	60cb      	str	r3, [r1, #12]
								break ;
 80003a6:	e00a      	b.n	80003be <Port_Init+0x12e>
								SET_BIT(PORT_GPIOA->ODR,pin) ; ;
 80003a8:	4b7d      	ldr	r3, [pc, #500]	@ (80005a0 <Port_Init+0x310>)
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	7b3b      	ldrb	r3, [r7, #12]
 80003ae:	2101      	movs	r1, #1
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	497a      	ldr	r1, [pc, #488]	@ (80005a0 <Port_Init+0x310>)
 80003b6:	4313      	orrs	r3, r2
 80003b8:	60cb      	str	r3, [r1, #12]
								break ;
 80003ba:	e000      	b.n	80003be <Port_Init+0x12e>
							default :
 80003bc:	bf00      	nop
					break ;
 80003be:	e0b9      	b.n	8000534 <Port_Init+0x2a4>
					case PORT_PORTB :
						if (pin <= PORT_A7 )
 80003c0:	7b3b      	ldrb	r3, [r7, #12]
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	d817      	bhi.n	80003f6 <Port_Init+0x166>
						{
							PORT_GPIOB->CRL &=~(0b1111 << (pin * 4) ) ;// Clear Bits
 80003c6:	4b77      	ldr	r3, [pc, #476]	@ (80005a4 <Port_Init+0x314>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	7b3a      	ldrb	r2, [r7, #12]
 80003cc:	0092      	lsls	r2, r2, #2
 80003ce:	210f      	movs	r1, #15
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	43d2      	mvns	r2, r2
 80003d6:	4611      	mov	r1, r2
 80003d8:	4a72      	ldr	r2, [pc, #456]	@ (80005a4 <Port_Init+0x314>)
 80003da:	400b      	ands	r3, r1
 80003dc:	6013      	str	r3, [r2, #0]
							PORT_GPIOB->CRL |=(Mode << (pin * 4))   ;
 80003de:	4b71      	ldr	r3, [pc, #452]	@ (80005a4 <Port_Init+0x314>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	7af9      	ldrb	r1, [r7, #11]
 80003e4:	7b3a      	ldrb	r2, [r7, #12]
 80003e6:	0092      	lsls	r2, r2, #2
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a6d      	ldr	r2, [pc, #436]	@ (80005a4 <Port_Init+0x314>)
 80003f0:	430b      	orrs	r3, r1
 80003f2:	6013      	str	r3, [r2, #0]
 80003f4:	e018      	b.n	8000428 <Port_Init+0x198>
						}
						else
						{
							PORT_GPIOB->CRH &= ~(0b1111 << ((pin-8) * 4) ) ;// Clear Bits
 80003f6:	4b6b      	ldr	r3, [pc, #428]	@ (80005a4 <Port_Init+0x314>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	7b3a      	ldrb	r2, [r7, #12]
 80003fc:	3a08      	subs	r2, #8
 80003fe:	0092      	lsls	r2, r2, #2
 8000400:	210f      	movs	r1, #15
 8000402:	fa01 f202 	lsl.w	r2, r1, r2
 8000406:	43d2      	mvns	r2, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a66      	ldr	r2, [pc, #408]	@ (80005a4 <Port_Init+0x314>)
 800040c:	400b      	ands	r3, r1
 800040e:	6053      	str	r3, [r2, #4]
							PORT_GPIOB->CRH |=   (Mode << ((pin-8) * 4) )   ;
 8000410:	4b64      	ldr	r3, [pc, #400]	@ (80005a4 <Port_Init+0x314>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	7af9      	ldrb	r1, [r7, #11]
 8000416:	7b3a      	ldrb	r2, [r7, #12]
 8000418:	3a08      	subs	r2, #8
 800041a:	0092      	lsls	r2, r2, #2
 800041c:	fa01 f202 	lsl.w	r2, r1, r2
 8000420:	4611      	mov	r1, r2
 8000422:	4a60      	ldr	r2, [pc, #384]	@ (80005a4 <Port_Init+0x314>)
 8000424:	430b      	orrs	r3, r1
 8000426:	6053      	str	r3, [r2, #4]
						}
						// Handle Pull_Down and Pull_Up and Output initialized Values
						if (IN_PULL == Mode)
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	2b08      	cmp	r3, #8
 800042c:	d122      	bne.n	8000474 <Port_Init+0x1e4>
						{
							switch (PortCfg[u8_index].Pull)
 800042e:	7bba      	ldrb	r2, [r7, #14]
 8000430:	4613      	mov	r3, r2
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	4413      	add	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	78db      	ldrb	r3, [r3, #3]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d002      	beq.n	800044a <Port_Init+0x1ba>
 8000444:	2b01      	cmp	r3, #1
 8000446:	d00b      	beq.n	8000460 <Port_Init+0x1d0>
								default :
									// error
									// invalid configuration
							}
						}
						break ;
 8000448:	e074      	b.n	8000534 <Port_Init+0x2a4>
									CLR_BIT(PORT_GPIOB->ODR,pin) ;
 800044a:	4b56      	ldr	r3, [pc, #344]	@ (80005a4 <Port_Init+0x314>)
 800044c:	68da      	ldr	r2, [r3, #12]
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	2101      	movs	r1, #1
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	43db      	mvns	r3, r3
 8000458:	4952      	ldr	r1, [pc, #328]	@ (80005a4 <Port_Init+0x314>)
 800045a:	4013      	ands	r3, r2
 800045c:	60cb      	str	r3, [r1, #12]
									break ;
 800045e:	e00a      	b.n	8000476 <Port_Init+0x1e6>
									SET_BIT(PORT_GPIOB->ODR,pin) ; ;
 8000460:	4b50      	ldr	r3, [pc, #320]	@ (80005a4 <Port_Init+0x314>)
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	7b3b      	ldrb	r3, [r7, #12]
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	494d      	ldr	r1, [pc, #308]	@ (80005a4 <Port_Init+0x314>)
 800046e:	4313      	orrs	r3, r2
 8000470:	60cb      	str	r3, [r1, #12]
									break ;
 8000472:	e000      	b.n	8000476 <Port_Init+0x1e6>
								default :
 8000474:	bf00      	nop
						break ;
 8000476:	e05d      	b.n	8000534 <Port_Init+0x2a4>
					case PORT_PORTC :
						if (pin <= PORT_A7)
 8000478:	7b3b      	ldrb	r3, [r7, #12]
 800047a:	2b07      	cmp	r3, #7
 800047c:	d817      	bhi.n	80004ae <Port_Init+0x21e>
						{
							PORT_GPIOC->CRL &=~(0b1111 << (pin * 4) ) ;// Clear Bits
 800047e:	4b4a      	ldr	r3, [pc, #296]	@ (80005a8 <Port_Init+0x318>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	7b3a      	ldrb	r2, [r7, #12]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	210f      	movs	r1, #15
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	43d2      	mvns	r2, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a45      	ldr	r2, [pc, #276]	@ (80005a8 <Port_Init+0x318>)
 8000492:	400b      	ands	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
							PORT_GPIOC->CRL |=(Mode << (pin * 4))   ;
 8000496:	4b44      	ldr	r3, [pc, #272]	@ (80005a8 <Port_Init+0x318>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	7af9      	ldrb	r1, [r7, #11]
 800049c:	7b3a      	ldrb	r2, [r7, #12]
 800049e:	0092      	lsls	r2, r2, #2
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a40      	ldr	r2, [pc, #256]	@ (80005a8 <Port_Init+0x318>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6013      	str	r3, [r2, #0]
 80004ac:	e018      	b.n	80004e0 <Port_Init+0x250>
						}
						else
						{
							PORT_GPIOC->CRH &= ~(0b1111 << ((pin - 8) * 4) ) ; // Clear Bits
 80004ae:	4b3e      	ldr	r3, [pc, #248]	@ (80005a8 <Port_Init+0x318>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	7b3a      	ldrb	r2, [r7, #12]
 80004b4:	3a08      	subs	r2, #8
 80004b6:	0092      	lsls	r2, r2, #2
 80004b8:	210f      	movs	r1, #15
 80004ba:	fa01 f202 	lsl.w	r2, r1, r2
 80004be:	43d2      	mvns	r2, r2
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a39      	ldr	r2, [pc, #228]	@ (80005a8 <Port_Init+0x318>)
 80004c4:	400b      	ands	r3, r1
 80004c6:	6053      	str	r3, [r2, #4]
							PORT_GPIOC->CRH |=   (Mode << ((pin - 8) * 4) )   ;
 80004c8:	4b37      	ldr	r3, [pc, #220]	@ (80005a8 <Port_Init+0x318>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	7af9      	ldrb	r1, [r7, #11]
 80004ce:	7b3a      	ldrb	r2, [r7, #12]
 80004d0:	3a08      	subs	r2, #8
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a33      	ldr	r2, [pc, #204]	@ (80005a8 <Port_Init+0x318>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6053      	str	r3, [r2, #4]
						}
						// Setting Pull up and Pull down and Output  initialized Values
						if (IN_PULL == Mode)
 80004e0:	7afb      	ldrb	r3, [r7, #11]
 80004e2:	2b08      	cmp	r3, #8
 80004e4:	d122      	bne.n	800052c <Port_Init+0x29c>
						{
							switch (PortCfg[u8_index].Pull)
 80004e6:	7bba      	ldrb	r2, [r7, #14]
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	78db      	ldrb	r3, [r3, #3]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d002      	beq.n	8000502 <Port_Init+0x272>
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d00b      	beq.n	8000518 <Port_Init+0x288>
								default :
									// error
									// invalid configuration
							}
						}
						break ;
 8000500:	e018      	b.n	8000534 <Port_Init+0x2a4>
									CLR_BIT((PORT_GPIOC->ODR),pin) ;
 8000502:	4b29      	ldr	r3, [pc, #164]	@ (80005a8 <Port_Init+0x318>)
 8000504:	68da      	ldr	r2, [r3, #12]
 8000506:	7b3b      	ldrb	r3, [r7, #12]
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f303 	lsl.w	r3, r1, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	4925      	ldr	r1, [pc, #148]	@ (80005a8 <Port_Init+0x318>)
 8000512:	4013      	ands	r3, r2
 8000514:	60cb      	str	r3, [r1, #12]
									break ;
 8000516:	e00a      	b.n	800052e <Port_Init+0x29e>
									SET_BIT((PORT_GPIOC->ODR),pin) ; ;
 8000518:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <Port_Init+0x318>)
 800051a:	68da      	ldr	r2, [r3, #12]
 800051c:	7b3b      	ldrb	r3, [r7, #12]
 800051e:	2101      	movs	r1, #1
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	4920      	ldr	r1, [pc, #128]	@ (80005a8 <Port_Init+0x318>)
 8000526:	4313      	orrs	r3, r2
 8000528:	60cb      	str	r3, [r1, #12]
									break ;
 800052a:	e000      	b.n	800052e <Port_Init+0x29e>
								default :
 800052c:	bf00      	nop
						break ;
 800052e:	e001      	b.n	8000534 <Port_Init+0x2a4>
					default :
						ret = E_NOT_OK ;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
				}
			// Initialize Output Pins Values
			if (PortCfg[u8_index].Direction == PORT_PIN_OUT)
 8000534:	7bba      	ldrb	r2, [r7, #14]
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4413      	add	r3, r2
 8000544:	785b      	ldrb	r3, [r3, #1]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d170      	bne.n	800062c <Port_Init+0x39c>
			{
				switch (port)
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d04d      	beq.n	80005ec <Port_Init+0x35c>
 8000550:	2b02      	cmp	r3, #2
 8000552:	dc6c      	bgt.n	800062e <Port_Init+0x39e>
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <Port_Init+0x2ce>
 8000558:	2b01      	cmp	r3, #1
 800055a:	d027      	beq.n	80005ac <Port_Init+0x31c>
 800055c:	e067      	b.n	800062e <Port_Init+0x39e>
				{
				case PORT_PORTA :
					(PortCfg[u8_index].InitialState == PORT_PIN_HIGH) ? (SET_BIT((PORT_GPIOA->ODR),pin)) : (CLR_BIT((PORT_GPIOA->ODR),pin)) ;
 800055e:	7bba      	ldrb	r2, [r7, #14]
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d109      	bne.n	8000588 <Port_Init+0x2f8>
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <Port_Init+0x310>)
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	7b3b      	ldrb	r3, [r7, #12]
 800057a:	2101      	movs	r1, #1
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4907      	ldr	r1, [pc, #28]	@ (80005a0 <Port_Init+0x310>)
 8000582:	4313      	orrs	r3, r2
 8000584:	60cb      	str	r3, [r1, #12]
					break ;
 8000586:	e052      	b.n	800062e <Port_Init+0x39e>
					(PortCfg[u8_index].InitialState == PORT_PIN_HIGH) ? (SET_BIT((PORT_GPIOA->ODR),pin)) : (CLR_BIT((PORT_GPIOA->ODR),pin)) ;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <Port_Init+0x310>)
 800058a:	68da      	ldr	r2, [r3, #12]
 800058c:	7b3b      	ldrb	r3, [r7, #12]
 800058e:	2101      	movs	r1, #1
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	4902      	ldr	r1, [pc, #8]	@ (80005a0 <Port_Init+0x310>)
 8000598:	4013      	ands	r3, r2
 800059a:	60cb      	str	r3, [r1, #12]
					break ;
 800059c:	e047      	b.n	800062e <Port_Init+0x39e>
 800059e:	bf00      	nop
 80005a0:	40010800 	.word	0x40010800
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	40011000 	.word	0x40011000
				case PORT_PORTB :
					(PortCfg[u8_index].InitialState == PORT_PIN_HIGH) ? (SET_BIT((PORT_GPIOB->ODR),pin)) : (CLR_BIT((PORT_GPIOB->ODR),pin)) ;
 80005ac:	7bba      	ldrb	r2, [r7, #14]
 80005ae:	4613      	mov	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d109      	bne.n	80005d6 <Port_Init+0x346>
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <Port_Init+0x3b8>)
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	7b3b      	ldrb	r3, [r7, #12]
 80005c8:	2101      	movs	r1, #1
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	491e      	ldr	r1, [pc, #120]	@ (8000648 <Port_Init+0x3b8>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	60cb      	str	r3, [r1, #12]
					break ;
 80005d4:	e02b      	b.n	800062e <Port_Init+0x39e>
					(PortCfg[u8_index].InitialState == PORT_PIN_HIGH) ? (SET_BIT((PORT_GPIOB->ODR),pin)) : (CLR_BIT((PORT_GPIOB->ODR),pin)) ;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <Port_Init+0x3b8>)
 80005d8:	68da      	ldr	r2, [r3, #12]
 80005da:	7b3b      	ldrb	r3, [r7, #12]
 80005dc:	2101      	movs	r1, #1
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	4918      	ldr	r1, [pc, #96]	@ (8000648 <Port_Init+0x3b8>)
 80005e6:	4013      	ands	r3, r2
 80005e8:	60cb      	str	r3, [r1, #12]
					break ;
 80005ea:	e020      	b.n	800062e <Port_Init+0x39e>
				case PORT_PORTC :
					(PortCfg[u8_index].InitialState == PORT_PIN_HIGH) ? (SET_BIT((PORT_GPIOC->ODR),pin)) : (CLR_BIT((PORT_GPIOC->ODR),pin)) ;
 80005ec:	7bba      	ldrb	r2, [r7, #14]
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d109      	bne.n	8000616 <Port_Init+0x386>
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <Port_Init+0x3bc>)
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	7b3b      	ldrb	r3, [r7, #12]
 8000608:	2101      	movs	r1, #1
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	490f      	ldr	r1, [pc, #60]	@ (800064c <Port_Init+0x3bc>)
 8000610:	4313      	orrs	r3, r2
 8000612:	60cb      	str	r3, [r1, #12]
					break ;
 8000614:	e00b      	b.n	800062e <Port_Init+0x39e>
					(PortCfg[u8_index].InitialState == PORT_PIN_HIGH) ? (SET_BIT((PORT_GPIOC->ODR),pin)) : (CLR_BIT((PORT_GPIOC->ODR),pin)) ;
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <Port_Init+0x3bc>)
 8000618:	68da      	ldr	r2, [r3, #12]
 800061a:	7b3b      	ldrb	r3, [r7, #12]
 800061c:	2101      	movs	r1, #1
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	4909      	ldr	r1, [pc, #36]	@ (800064c <Port_Init+0x3bc>)
 8000626:	4013      	ands	r3, r2
 8000628:	60cb      	str	r3, [r1, #12]
					break ;
 800062a:	e000      	b.n	800062e <Port_Init+0x39e>
				default :
 800062c:	bf00      	nop
		for (u8 u8_index = 0 ; u8_index <PREDEF_USED_PINS ; u8_index++)
 800062e:	7bbb      	ldrb	r3, [r7, #14]
 8000630:	3301      	adds	r3, #1
 8000632:	73bb      	strb	r3, [r7, #14]
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	2b00      	cmp	r3, #0
 8000638:	f43f ae39 	beq.w	80002ae <Port_Init+0x1e>
				}
			}
		}

	}
	return ret ;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40010c00 	.word	0x40010c00
 800064c:	40011000 	.word	0x40011000

08000650 <RCC_SystemClockConfig>:




/* interfaces */
void RCC_SystemClockConfig(const SystemClockConfig_t* systemclockconfig){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	/* check on APB1 and APB2 Prescalers */
	RCC_CHECK_APB_PRESCALER(systemclockconfig->APB1Prescaler,systemclockconfig->APB2Prescaler) ;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	2b0b      	cmp	r3, #11
 800065e:	d804      	bhi.n	800066a <RCC_SystemClockConfig+0x1a>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	2b0b      	cmp	r3, #11
 8000666:	d800      	bhi.n	800066a <RCC_SystemClockConfig+0x1a>
 8000668:	e000      	b.n	800066c <RCC_SystemClockConfig+0x1c>
 800066a:	e7fe      	b.n	800066a <RCC_SystemClockConfig+0x1a>
	/* Clear Prescaler Values */
	RCC->CFGR &= ~(RCC_CFGR_HPRE_MASK << HPRE_OFFSET)  ;
 800066c:	4b3f      	ldr	r3, [pc, #252]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a3e      	ldr	r2, [pc, #248]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 8000672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000676:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~((RCC_CFGR_PPRE_MASK) << PPRE1_OFFSET) ;
 8000678:	4b3c      	ldr	r3, [pc, #240]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a3b      	ldr	r2, [pc, #236]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 800067e:	f423 436f 	bic.w	r3, r3, #61184	@ 0xef00
 8000682:	6053      	str	r3, [r2, #4]
	/* set system prescalers  (AHB, APB1, APB2 ) */
	RCC->CFGR |= ((systemclockconfig->AHB_Prescaler) << HPRE_OFFSET) ;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	4937      	ldr	r1, [pc, #220]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 8000690:	4313      	orrs	r3, r2
 8000692:	604b      	str	r3, [r1, #4]
	RCC->CFGR |= ((systemclockconfig->APB1Prescaler - APB_PRESCALER_OFFSET) << PPRE1_OFFSET) ;
 8000694:	4b35      	ldr	r3, [pc, #212]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7952      	ldrb	r2, [r2, #5]
 800069c:	3a04      	subs	r2, #4
 800069e:	0212      	lsls	r2, r2, #8
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a32      	ldr	r2, [pc, #200]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= ((systemclockconfig->APB2Prescaler - APB_PRESCALER_OFFSET) << PPRE2_OFFSET) ;
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7992      	ldrb	r2, [r2, #6]
 80006b0:	3a04      	subs	r2, #4
 80006b2:	02d2      	lsls	r2, r2, #11
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a2d      	ldr	r2, [pc, #180]	@ (800076c <RCC_SystemClockConfig+0x11c>)
 80006b8:	430b      	orrs	r3, r1
 80006ba:	6053      	str	r3, [r2, #4]
	/* configure system clock */
	switch (systemclockconfig->sysClkSource) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d017      	beq.n	80006f4 <RCC_SystemClockConfig+0xa4>
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	dc3d      	bgt.n	8000744 <RCC_SystemClockConfig+0xf4>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <RCC_SystemClockConfig+0x82>
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d007      	beq.n	80006e0 <RCC_SystemClockConfig+0x90>
 80006d0:	e038      	b.n	8000744 <RCC_SystemClockConfig+0xf4>
		case HSI :
			/* Configure HSI Clock */
			RCC_HSIConfig(ON) ;
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 f884 	bl	80007e0 <RCC_HSIConfig>
			SYSCLK_SRC = HSI ;
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <RCC_SystemClockConfig+0x120>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
			break;
 80006de:	e032      	b.n	8000746 <RCC_SystemClockConfig+0xf6>
		case HSE :
			/* Configure HSE Clock */

			 RCC_HSEConfig(systemclockconfig->HSE_Type, ON) ;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f844 	bl	8000774 <RCC_HSEConfig>
			 SYSCLK_SRC = HSE ;
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <RCC_SystemClockConfig+0x120>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
			 break;
 80006f2:	e028      	b.n	8000746 <RCC_SystemClockConfig+0xf6>
		case PLL :
			/* Configure PLL  */
			 RCC_PLLConfig(&(systemclockconfig->PLL_Info), ON) ;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3302      	adds	r3, #2
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f894 	bl	8000828 <RCC_PLLConfig>

			 PLL_SRC_t pll_source = systemclockconfig->PLL_Info.PLL_Source ;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	73fb      	strb	r3, [r7, #15]
			 if (pll_source == HSI_DIV_2){
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <RCC_SystemClockConfig+0xc4>
				 RCC_HSIConfig(ON) ;
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f867 	bl	80007e0 <RCC_HSIConfig>
 8000712:	e012      	b.n	800073a <RCC_SystemClockConfig+0xea>
			 }else if (pll_source == HSE_NO_DIV) {
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d106      	bne.n	8000728 <RCC_SystemClockConfig+0xd8>
				 RCC_HSEConfig(systemclockconfig->HSE_Type, ON) ;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f827 	bl	8000774 <RCC_HSEConfig>
 8000726:	e008      	b.n	800073a <RCC_SystemClockConfig+0xea>
			 }else if (pll_source == HSE_DIV_2){
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d105      	bne.n	800073a <RCC_SystemClockConfig+0xea>
				 RCC_HSEConfig(systemclockconfig->HSE_Type, ON) ;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	785b      	ldrb	r3, [r3, #1]
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f81d 	bl	8000774 <RCC_HSEConfig>
			 }
			 SYSCLK_SRC = PLL ;
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <RCC_SystemClockConfig+0x120>)
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]
			 break;
 8000740:	e001      	b.n	8000746 <RCC_SystemClockConfig+0xf6>
 8000742:	e7ff      	b.n	8000744 <RCC_SystemClockConfig+0xf4>
		default:
			/* invalid System Clock Selection */
			/* System Clock must be (HSI or HSE or PLL ) */
			while (1) ;
 8000744:	e7fd      	b.n	8000742 <RCC_SystemClockConfig+0xf2>
			break;
	}
	/* Select the Output of MCO Pin */
	if (systemclockconfig->MCO_OutSrc != MCO_NOCLK) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	79db      	ldrb	r3, [r3, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d004      	beq.n	8000758 <RCC_SystemClockConfig+0x108>
		/* enable MCO Pin */
		RCC_EnableMCO(systemclockconfig->MCO_OutSrc) ;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	79db      	ldrb	r3, [r3, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f8f4 	bl	8000940 <RCC_EnableMCO>
	}
	/* select system clock source  */
	RCC_SelectSysClockSource(systemclockconfig->sysClkSource) ;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f8ab 	bl	80008b8 <RCC_SelectSysClockSource>

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	20000038 	.word	0x20000038

08000774 <RCC_HSEConfig>:
/* Peripherals Clock Enablers and Disablers */
/* Clocks Config Functions */
void RCC_HSEConfig(HSE_Clock_t HSE_clock ,ClockState_t state){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	if ( ON == state){
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d11e      	bne.n	80007c8 <RCC_HSEConfig+0x54>
		/* Configure the Type of HSE */
		 if (HSE_clock == HSE_RC) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d106      	bne.n	800079e <RCC_HSEConfig+0x2a>
			 /* Enable Bypassing of external crystal */
			 SET_BIT(RCC->CR,HSEBYP) ;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <RCC_HSEConfig+0x68>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <RCC_HSEConfig+0x68>)
 8000796:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	e005      	b.n	80007aa <RCC_HSEConfig+0x36>
		 }else {
			 /* External 4- 16 MHz Crystal Not Bypassed */
			 CLR_BIT(RCC->CR,HSEBYP) ;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <RCC_HSEConfig+0x68>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <RCC_HSEConfig+0x68>)
 80007a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007a8:	6013      	str	r3, [r2, #0]
		 }
		/* Enable HSE Clock */
		SET_BIT(RCC->CR,HSEON) ;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <RCC_HSEConfig+0x68>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <RCC_HSEConfig+0x68>)
 80007b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007b4:	6013      	str	r3, [r2, #0]
		if (RCC_HSE_WaitReady(READY_TIMEOUT_CYCLES)){
 80007b6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007ba:	f000 f8e3 	bl	8000984 <RCC_HSE_WaitReady>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d007      	beq.n	80007d4 <RCC_HSEConfig+0x60>
			/* Can't Start HSE */
			while(1) ;
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <RCC_HSEConfig+0x50>
		}
	}else {
	  CLR_BIT(RCC->CR, HSEON) ;
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <RCC_HSEConfig+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a03      	ldr	r2, [pc, #12]	@ (80007dc <RCC_HSEConfig+0x68>)
 80007ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007d2:	6013      	str	r3, [r2, #0]
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000

080007e0 <RCC_HSIConfig>:
void RCC_HSIConfig(ClockState_t state){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if ( ON == state){
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10e      	bne.n	800080e <RCC_HSIConfig+0x2e>

		/* Enable HSI Clock */
		SET_BIT(RCC->CR,HSION) ;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <RCC_HSIConfig+0x44>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000824 <RCC_HSIConfig+0x44>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]
		if (RCC_HSI_WaitReady(READY_TIMEOUT_CYCLES)){
 80007fc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000800:	f000 f910 	bl	8000a24 <RCC_HSI_WaitReady>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <RCC_HSIConfig+0x3a>
			/* Can't Start HSE */
			while(1) ;
 800080a:	bf00      	nop
 800080c:	e7fd      	b.n	800080a <RCC_HSIConfig+0x2a>
		}
	}else {
	  CLR_BIT(RCC->CR,HSION) ;
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <RCC_HSIConfig+0x44>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <RCC_HSIConfig+0x44>)
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	6013      	str	r3, [r2, #0]
	}
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <RCC_PLLConfig>:
void RCC_PLLConfig(const PLL_Info_t* pll_info, ClockState_t state){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	/* Configure Pll Multiplication Factor */

	PLL_SRC_t source = pll_info->PLL_Source ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	73fb      	strb	r3, [r7, #15]
	PLL_MUL_t multipier = pll_info->PLL_Mul ;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	785b      	ldrb	r3, [r3, #1]
 800083e:	73bb      	strb	r3, [r7, #14]

	if ((multipier<= PLL_MUL_16) && (multipier >= 0))
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	2b0e      	cmp	r3, #14
 8000844:	d831      	bhi.n	80008aa <RCC_PLLConfig+0x82>
	{
		/*Clear The Previous PLL MUL Bits */
		RCC->CFGR &= ~(MASK_4BITS << PLLMUL_OFFSET) ;
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800084c:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000850:	6053      	str	r3, [r2, #4]
		/* Set the new value of the PLL MUL */
		RCC->CFGR |= (multipier << PLLMUL_OFFSET) ;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	049b      	lsls	r3, r3, #18
 800085a:	4916      	ldr	r1, [pc, #88]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800085c:	4313      	orrs	r3, r2
 800085e:	604b      	str	r3, [r1, #4]
		/* Configure The Source of the PLL */
		switch (source) {
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d106      	bne.n	8000874 <RCC_PLLConfig+0x4c>
			case HSI_DIV_2:
				CLR_BIT(RCC->CFGR,PLLSRC) ;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800086c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000870:	6053      	str	r3, [r2, #4]
				break;
 8000872:	e016      	b.n	80008a2 <RCC_PLLConfig+0x7a>
			default:
				/* in case HSE( NO_DIV- DIV/2 ) */
				if (source == HSE_DIV_2) {
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d106      	bne.n	8000888 <RCC_PLLConfig+0x60>
					SET_BIT(RCC->CFGR,PLLXTRPE) ;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 8000880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000884:	6053      	str	r3, [r2, #4]
 8000886:	e005      	b.n	8000894 <RCC_PLLConfig+0x6c>
				}else {
					CLR_BIT(RCC->CFGR,PLLXTRPE) ;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a09      	ldr	r2, [pc, #36]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800088e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000892:	6053      	str	r3, [r2, #4]
				}
				SET_BIT(RCC->CFGR,PLLSRC) ;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <RCC_PLLConfig+0x8c>)
 800089a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800089e:	6053      	str	r3, [r2, #4]
				break;
 80008a0:	bf00      	nop
		}
		RCC_PLL_WaitReady(READY_TIMEOUT_CYCLES) ;
 80008a2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80008a6:	f000 f895 	bl	80009d4 <RCC_PLL_WaitReady>
	}
	// check on the ouput frequency of pll
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <RCC_SelectSysClockSource>:
void RCC_SelectSysClockSource(SystemClock_SRC_t source){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	if (source <=  PLL ){
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d816      	bhi.n	80008f6 <RCC_SelectSysClockSource+0x3e>
	/* Clear The Previous SW bits */
		RCC->CFGR &= ~(MASK_2BITS << SW_OFFSET) ;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <RCC_SelectSysClockSource+0x48>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <RCC_SelectSysClockSource+0x48>)
 80008ce:	f023 0303 	bic.w	r3, r3, #3
 80008d2:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (source << SW_OFFSET) ;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <RCC_SelectSysClockSource+0x48>)
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4909      	ldr	r1, [pc, #36]	@ (8000900 <RCC_SelectSysClockSource+0x48>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	604b      	str	r3, [r1, #4]
		u8 source ;
		source = RCC_Check_SystemClock(TIMEOUT_CYCLES) ;
 80008e0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80008e4:	f000 f8c6 	bl	8000a74 <RCC_Check_SystemClock>
 80008e8:	4603      	mov	r3, r0
 80008ea:	73fb      	strb	r3, [r7, #15]
		if (source == /* not applicable */ 3) {
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d102      	bne.n	80008f8 <RCC_SelectSysClockSource+0x40>
			/* can't set source for system clock */
			while (1) ;
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <RCC_SelectSysClockSource+0x3a>
		}
	}else {
		/* invalid source */
		while (1) ;
 80008f6:	e7fe      	b.n	80008f6 <RCC_SelectSysClockSource+0x3e>
	}
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000

08000904 <RCC_EnablePeripheralClock>:

void RCC_EnablePeripheralClock(Bus_t bus ,u32 peripheral){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
	/* Enable Peripheral  at bus */
	/* 	AHB =  0
	 * 	APB2 = 1
	 *  APB1 = 2
	 */
	if (bus > APB1) {
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d901      	bls.n	800091a <RCC_EnablePeripheralClock+0x16>
		/* invalid bus */
		while (1) ;
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <RCC_EnablePeripheralClock+0x12>
	}
	*(((u32*)&(RCC->AHBENR))+bus) |= peripheral;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	009a      	lsls	r2, r3, #2
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <RCC_EnablePeripheralClock+0x38>)
 8000920:	4413      	add	r3, r2
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	009a      	lsls	r2, r3, #2
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <RCC_EnablePeripheralClock+0x38>)
 800092a:	4413      	add	r3, r2
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021014 	.word	0x40021014

08000940 <RCC_EnableMCO>:
		RCC->CR &= ~(TRIMVAL_MASK << HSITRIM) ;
		/* set new Trimval */
		RCC->CR |= (trimval << HSITRIM) ;
	}
}
void RCC_EnableMCO(MCO_Output_t MCO_OutSrc) {
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	if (((MCO_OutSrc - MCO_SYSCLK) < MCO_NOCLK ) && (MCO_OutSrc != MCO_NOCLK)){
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d804      	bhi.n	800095a <RCC_EnableMCO+0x1a>
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <RCC_EnableMCO+0x1a>
		/* Invalid MCO Source */
		while (1) ;
 8000956:	bf00      	nop
 8000958:	e7fd      	b.n	8000956 <RCC_EnableMCO+0x16>
	}else {
		/* Clear Previous MCO Source Bits */
		RCC->CFGR &= ~ (MASK_3BITS << MCO_OFFSET) ;
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <RCC_EnableMCO+0x40>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <RCC_EnableMCO+0x40>)
 8000960:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000964:	6053      	str	r3, [r2, #4]
		/* Choose MCO Source */
		RCC->CFGR |= (MCO_OutSrc << MCO_OFFSET) ;
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <RCC_EnableMCO+0x40>)
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	061b      	lsls	r3, r3, #24
 800096e:	4904      	ldr	r1, [pc, #16]	@ (8000980 <RCC_EnableMCO+0x40>)
 8000970:	4313      	orrs	r3, r2
 8000972:	604b      	str	r3, [r1, #4]
	}
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <RCC_HSE_WaitReady>:
static u8 RCC_HSE_WaitReady(u32 timeoutcycles){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	/* wait for the HSE Clock to be Ready */
	while ((!RETURN_BIT(RCC->CR,HSERDY)) && (timeoutcycles > 0)) {
 800098c:	e003      	b.n	8000996 <RCC_HSE_WaitReady+0x12>
		__asm volatile ("NOP") ;
 800098e:	bf00      	nop
		timeoutcycles-- ;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
	while ((!RETURN_BIT(RCC->CR,HSERDY)) && (timeoutcycles > 0)) {
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <RCC_HSE_WaitReady+0x4c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <RCC_HSE_WaitReady+0x24>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f2      	bne.n	800098e <RCC_HSE_WaitReady+0xa>
	}
	if (timeoutcycles == 0) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d109      	bne.n	80009c2 <RCC_HSE_WaitReady+0x3e>
		/* in case of ready the expression = 0 else = 1  */
		return !(RETURN_BIT(RCC->CR,HSERDY)) ;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <RCC_HSE_WaitReady+0x4c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	e000      	b.n	80009c4 <RCC_HSE_WaitReady+0x40>
	}else {
		return 0 ;
 80009c2:	2300      	movs	r3, #0
	}
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <RCC_PLL_WaitReady>:
static u8 RCC_PLL_WaitReady(u32 timeoutcycles){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	/* wait for the HSE Clock to be Ready */
	while ((!RETURN_BIT(RCC->CR,PLLRDY)) && (timeoutcycles > 0)) {
 80009dc:	e003      	b.n	80009e6 <RCC_PLL_WaitReady+0x12>
		__asm volatile ("NOP") ;
 80009de:	bf00      	nop
		timeoutcycles-- ;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	607b      	str	r3, [r7, #4]
	while ((!RETURN_BIT(RCC->CR,PLLRDY)) && (timeoutcycles > 0)) {
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <RCC_PLL_WaitReady+0x4c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <RCC_PLL_WaitReady+0x24>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f2      	bne.n	80009de <RCC_PLL_WaitReady+0xa>
	}
	if (timeoutcycles == 0) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d109      	bne.n	8000a12 <RCC_PLL_WaitReady+0x3e>
		/* in case of ready the expression = 0 else = 1  */
		return !(RETURN_BIT(RCC->CR,PLLRDY)) ;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <RCC_PLL_WaitReady+0x4c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf0c      	ite	eq
 8000a0a:	2301      	moveq	r3, #1
 8000a0c:	2300      	movne	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	e000      	b.n	8000a14 <RCC_PLL_WaitReady+0x40>
	}else {
		return 0 ;
 8000a12:	2300      	movs	r3, #0
	}
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <RCC_HSI_WaitReady>:
static u8 RCC_HSI_WaitReady(u32 timeoutcycles){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	/* wait for the HSE Clock to be Ready */
	while ((!RETURN_BIT(RCC->CR,HSIRDY)) && (timeoutcycles > 0)) {
 8000a2c:	e003      	b.n	8000a36 <RCC_HSI_WaitReady+0x12>
		/* No operation Instruction */
		__asm volatile ("NOP") ;
 8000a2e:	bf00      	nop
		timeoutcycles-- ;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
	while ((!RETURN_BIT(RCC->CR,HSIRDY)) && (timeoutcycles > 0)) {
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <RCC_HSI_WaitReady+0x4c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <RCC_HSI_WaitReady+0x24>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f2      	bne.n	8000a2e <RCC_HSI_WaitReady+0xa>
	}
	if (timeoutcycles == 0) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d109      	bne.n	8000a62 <RCC_HSI_WaitReady+0x3e>
		/* in case of ready the expression = 0 else = 1  */
		return !(RETURN_BIT(RCC->CR,HSIRDY)) ;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <RCC_HSI_WaitReady+0x4c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	e000      	b.n	8000a64 <RCC_HSI_WaitReady+0x40>
	}else {
		return 0 ;
 8000a62:	2300      	movs	r3, #0
	}
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <RCC_Check_SystemClock>:
static SystemClock_SRC_t RCC_Check_SystemClock(u32 timeoutcycles ){
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	u8 sws  = 0 ;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	u8 sw = 0 ;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
	/* read the two bits */
	sw = (u8) (RCC->CFGR & (0x3)) ;
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <RCC_Check_SystemClock+0x60>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	73bb      	strb	r3, [r7, #14]
	sws = (u8) ((RCC->CFGR & (0xC)) >> SWS_OFFSET) ;
 8000a90:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <RCC_Check_SystemClock+0x60>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	73fb      	strb	r3, [r7, #15]
	while ((sw != sws) && (timeoutcycles != 0)){
 8000a9e:	e003      	b.n	8000aa8 <RCC_Check_SystemClock+0x34>
		/* No operation Instruction */
		__asm volatile ("NOP") ;
 8000aa0:	bf00      	nop
		timeoutcycles-- ;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
	while ((sw != sws) && (timeoutcycles != 0)){
 8000aa8:	7bba      	ldrb	r2, [r7, #14]
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d002      	beq.n	8000ab6 <RCC_Check_SystemClock+0x42>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f4      	bne.n	8000aa0 <RCC_Check_SystemClock+0x2c>
	}
	if (timeoutcycles == 0) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <RCC_Check_SystemClock+0x54>
		if (sw != sws ){
 8000abc:	7bba      	ldrb	r2, [r7, #14]
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d001      	beq.n	8000ac8 <RCC_Check_SystemClock+0x54>
			return 3 /* Not Applicable */ ;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	e000      	b.n	8000aca <RCC_Check_SystemClock+0x56>
		}
	}
	return sws ;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <main>:
		
};


int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	RCC_SystemClockConfig(&systemclockconfig) ;
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <main+0x38>)
 8000ade:	f7ff fdb7 	bl	8000650 <RCC_SystemClockConfig>
	RCC_EnablePeripheralClock(APB2, GPIOA | GPIOB | GPIOC | USART1) ;
 8000ae2:	f244 011c 	movw	r1, #16412	@ 0x401c
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff ff0c 	bl	8000904 <RCC_EnablePeripheralClock>
	Port_Init(PortCfg) ;
 8000aec:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <main+0x3c>)
 8000aee:	f7ff fbcf 	bl	8000290 <Port_Init>
	Dio_WriteChannel(DIO_C13, STD_LOW) ;
 8000af2:	2100      	movs	r1, #0
 8000af4:	202d      	movs	r0, #45	@ 0x2d
 8000af6:	f7ff fb3b 	bl	8000170 <Dio_WriteChannel>
	NVIC_EnableIRQ(USART1_IRQ) ;
 8000afa:	2025      	movs	r0, #37	@ 0x25
 8000afc:	f7ff fb86 	bl	800020c <NVIC_EnableIRQ>
	NVIC_SetPendingIRQ(USART1_IRQ) ;
 8000b00:	2025      	movs	r0, #37	@ 0x25
 8000b02:	f7ff fba3 	bl	800024c <NVIC_SetPendingIRQ>
	/* Some Initializations of PSP */

	while (1)
	{

	Dio_WriteChannel(DIO_C13, STD_HIGH) ;
 8000b06:	2101      	movs	r1, #1
 8000b08:	202d      	movs	r0, #45	@ 0x2d
 8000b0a:	f7ff fb31 	bl	8000170 <Dio_WriteChannel>
 8000b0e:	e7fa      	b.n	8000b06 <main+0x2e>
 8000b10:	20000014 	.word	0x20000014
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <USART1_IRQHandler>:

	}
}

void USART1_IRQHandler (void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

Dio_WriteChannel(DIO_C13, STD_LOW) ;
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	202d      	movs	r0, #45	@ 0x2d
 8000b20:	f7ff fb26 	bl	8000170 <Dio_WriteChannel>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b56:	f000 f811 	bl	8000b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff ffbd 	bl	8000ad8 <main>

08000b5e <LoopForever>:

LoopForever:
  b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b6c:	08000be4 	.word	0x08000be4
  ldr r2, =_sbss
 8000b70:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b74:	2000003c 	.word	0x2000003c

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>
	...

08000b7c <__libc_init_array>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	2600      	movs	r6, #0
 8000b80:	4d0c      	ldr	r5, [pc, #48]	@ (8000bb4 <__libc_init_array+0x38>)
 8000b82:	4c0d      	ldr	r4, [pc, #52]	@ (8000bb8 <__libc_init_array+0x3c>)
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	10a4      	asrs	r4, r4, #2
 8000b88:	42a6      	cmp	r6, r4
 8000b8a:	d109      	bne.n	8000ba0 <__libc_init_array+0x24>
 8000b8c:	f000 f81a 	bl	8000bc4 <_init>
 8000b90:	2600      	movs	r6, #0
 8000b92:	4d0a      	ldr	r5, [pc, #40]	@ (8000bbc <__libc_init_array+0x40>)
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <__libc_init_array+0x44>)
 8000b96:	1b64      	subs	r4, r4, r5
 8000b98:	10a4      	asrs	r4, r4, #2
 8000b9a:	42a6      	cmp	r6, r4
 8000b9c:	d105      	bne.n	8000baa <__libc_init_array+0x2e>
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba4:	4798      	blx	r3
 8000ba6:	3601      	adds	r6, #1
 8000ba8:	e7ee      	b.n	8000b88 <__libc_init_array+0xc>
 8000baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bae:	4798      	blx	r3
 8000bb0:	3601      	adds	r6, #1
 8000bb2:	e7f2      	b.n	8000b9a <__libc_init_array+0x1e>
 8000bb4:	08000bdc 	.word	0x08000bdc
 8000bb8:	08000bdc 	.word	0x08000bdc
 8000bbc:	08000bdc 	.word	0x08000bdc
 8000bc0:	08000be0 	.word	0x08000be0

08000bc4 <_init>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr

08000bd0 <_fini>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	bf00      	nop
 8000bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd6:	bc08      	pop	{r3}
 8000bd8:	469e      	mov	lr, r3
 8000bda:	4770      	bx	lr
