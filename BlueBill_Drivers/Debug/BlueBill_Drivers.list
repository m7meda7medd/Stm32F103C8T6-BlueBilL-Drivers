
BlueBill_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab4  08000ab4  00010abc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab4  08000ab4  00010abc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab4  08000abc  00010abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab4  08000ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ab8  08000ab8  00010ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000abc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000abc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010abc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ae5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f90  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000405  00000000  00000000  00011ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00011ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000093  00000000  00000000  00011f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021c4  00000000  00000000  0001202b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017cb  00000000  00000000  000141ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000082dc  00000000  00000000  000159ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000024c  00000000  00000000  0001dc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0001dee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a80 	.word	0x08000a80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a80 	.word	0x08000a80

08000170 <GPIO_Init>:
 *			 R_NOK in case of error Happened
 */



state_type_t GPIO_Init(const PinConfig_t* Pin){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
state_type_t ret = R_OK ;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
switch (Pin->Port)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	785b      	ldrb	r3, [r3, #1]
 8000180:	2b02      	cmp	r3, #2
 8000182:	f000 80cc 	beq.w	800031e <GPIO_Init+0x1ae>
 8000186:	2b02      	cmp	r3, #2
 8000188:	f300 8128 	bgt.w	80003dc <GPIO_Init+0x26c>
 800018c:	2b00      	cmp	r3, #0
 800018e:	d002      	beq.n	8000196 <GPIO_Init+0x26>
 8000190:	2b01      	cmp	r3, #1
 8000192:	d065      	beq.n	8000260 <GPIO_Init+0xf0>
 8000194:	e122      	b.n	80003dc <GPIO_Init+0x26c>
{
	case Port_A :
		vRCC_EnablePeripheralClock(RCC_APB2, IOA) ;
 8000196:	2102      	movs	r1, #2
 8000198:	2002      	movs	r0, #2
 800019a:	f000 fba3 	bl	80008e4 <vRCC_EnablePeripheralClock>
		if (Pin->Pin <= Pin_7)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b07      	cmp	r3, #7
 80001a4:	d81b      	bhi.n	80001de <GPIO_Init+0x6e>
			{
				GPIOA->CRL &=~(0b1111 << ( Pin->Pin * 4))  ;// Clear Bits
 80001a6:	4b99      	ldr	r3, [pc, #612]	; (800040c <GPIO_Init+0x29c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	7812      	ldrb	r2, [r2, #0]
 80001ae:	0092      	lsls	r2, r2, #2
 80001b0:	210f      	movs	r1, #15
 80001b2:	fa01 f202 	lsl.w	r2, r1, r2
 80001b6:	43d2      	mvns	r2, r2
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a94      	ldr	r2, [pc, #592]	; (800040c <GPIO_Init+0x29c>)
 80001bc:	400b      	ands	r3, r1
 80001be:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |=(Pin->Mode << (Pin->Pin * 4) )   ;
 80001c0:	4b92      	ldr	r3, [pc, #584]	; (800040c <GPIO_Init+0x29c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	687a      	ldr	r2, [r7, #4]
 80001c6:	7892      	ldrb	r2, [r2, #2]
 80001c8:	4611      	mov	r1, r2
 80001ca:	687a      	ldr	r2, [r7, #4]
 80001cc:	7812      	ldrb	r2, [r2, #0]
 80001ce:	0092      	lsls	r2, r2, #2
 80001d0:	fa01 f202 	lsl.w	r2, r1, r2
 80001d4:	4611      	mov	r1, r2
 80001d6:	4a8d      	ldr	r2, [pc, #564]	; (800040c <GPIO_Init+0x29c>)
 80001d8:	430b      	orrs	r3, r1
 80001da:	6013      	str	r3, [r2, #0]
 80001dc:	e01c      	b.n	8000218 <GPIO_Init+0xa8>
			}
		else
			{
				GPIOA->CRH &= ~(0b1111 << ((Pin->Pin-8) * 4) ) ;// Clear Bits
 80001de:	4b8b      	ldr	r3, [pc, #556]	; (800040c <GPIO_Init+0x29c>)
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	7812      	ldrb	r2, [r2, #0]
 80001e6:	3a08      	subs	r2, #8
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	210f      	movs	r1, #15
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	43d2      	mvns	r2, r2
 80001f2:	4611      	mov	r1, r2
 80001f4:	4a85      	ldr	r2, [pc, #532]	; (800040c <GPIO_Init+0x29c>)
 80001f6:	400b      	ands	r3, r1
 80001f8:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |=   (Pin->Mode << ((Pin->Pin-8) * 4) )   ;
 80001fa:	4b84      	ldr	r3, [pc, #528]	; (800040c <GPIO_Init+0x29c>)
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	7892      	ldrb	r2, [r2, #2]
 8000202:	4611      	mov	r1, r2
 8000204:	687a      	ldr	r2, [r7, #4]
 8000206:	7812      	ldrb	r2, [r2, #0]
 8000208:	3a08      	subs	r2, #8
 800020a:	0092      	lsls	r2, r2, #2
 800020c:	fa01 f202 	lsl.w	r2, r1, r2
 8000210:	4611      	mov	r1, r2
 8000212:	4a7e      	ldr	r2, [pc, #504]	; (800040c <GPIO_Init+0x29c>)
 8000214:	430b      	orrs	r3, r1
 8000216:	6053      	str	r3, [r2, #4]
			}
		// Handle Pull_Down and Pull_Up and Output initialized Values
		if (INPUT == Pin->Direction)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	78db      	ldrb	r3, [r3, #3]
 800021c:	2b00      	cmp	r3, #0
 800021e:	f040 80e5 	bne.w	80003ec <GPIO_Init+0x27c>
		{
			switch (Pin->Pull)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	795b      	ldrb	r3, [r3, #5]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d00e      	beq.n	8000248 <GPIO_Init+0xd8>
 800022a:	2b02      	cmp	r3, #2
 800022c:	f040 80d9 	bne.w	80003e2 <GPIO_Init+0x272>
			{
				case PULL_DOWN :
					GPIOA->ODR &= ~(BIT_MASK << Pin->Pin ) ;
 8000230:	4b76      	ldr	r3, [pc, #472]	; (800040c <GPIO_Init+0x29c>)
 8000232:	68da      	ldr	r2, [r3, #12]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4619      	mov	r1, r3
 800023a:	2301      	movs	r3, #1
 800023c:	408b      	lsls	r3, r1
 800023e:	43db      	mvns	r3, r3
 8000240:	4972      	ldr	r1, [pc, #456]	; (800040c <GPIO_Init+0x29c>)
 8000242:	4013      	ands	r3, r2
 8000244:	60cb      	str	r3, [r1, #12]
					break ;
 8000246:	e00a      	b.n	800025e <GPIO_Init+0xee>
				case PULL_UP:
					GPIOA->ODR |=(BIT_MASK << Pin->Pin ) ;
 8000248:	4b70      	ldr	r3, [pc, #448]	; (800040c <GPIO_Init+0x29c>)
 800024a:	68da      	ldr	r2, [r3, #12]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4619      	mov	r1, r3
 8000252:	2301      	movs	r3, #1
 8000254:	408b      	lsls	r3, r1
 8000256:	496d      	ldr	r1, [pc, #436]	; (800040c <GPIO_Init+0x29c>)
 8000258:	4313      	orrs	r3, r2
 800025a:	60cb      	str	r3, [r1, #12]
					break ;
 800025c:	bf00      	nop
				default :
					// Not Pull Pin
			}
		break ;
 800025e:	e0c0      	b.n	80003e2 <GPIO_Init+0x272>
		case Port_B :
			vRCC_EnablePeripheralClock(RCC_APB2, IOB) ;
 8000260:	2103      	movs	r1, #3
 8000262:	2002      	movs	r0, #2
 8000264:	f000 fb3e 	bl	80008e4 <vRCC_EnablePeripheralClock>
			if (Pin->Pin <= Pin_7)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b07      	cmp	r3, #7
 800026e:	d81b      	bhi.n	80002a8 <GPIO_Init+0x138>
			{
				GPIOB->CRL &=~(0b1111 << (Pin->Pin * 4) ) ;// Clear Bits
 8000270:	4b67      	ldr	r3, [pc, #412]	; (8000410 <GPIO_Init+0x2a0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	7812      	ldrb	r2, [r2, #0]
 8000278:	0092      	lsls	r2, r2, #2
 800027a:	210f      	movs	r1, #15
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a62      	ldr	r2, [pc, #392]	; (8000410 <GPIO_Init+0x2a0>)
 8000286:	400b      	ands	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |=(Pin->Mode << (Pin->Pin * 4))   ;
 800028a:	4b61      	ldr	r3, [pc, #388]	; (8000410 <GPIO_Init+0x2a0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	7892      	ldrb	r2, [r2, #2]
 8000292:	4611      	mov	r1, r2
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a5b      	ldr	r2, [pc, #364]	; (8000410 <GPIO_Init+0x2a0>)
 80002a2:	430b      	orrs	r3, r1
 80002a4:	6013      	str	r3, [r2, #0]
 80002a6:	e01c      	b.n	80002e2 <GPIO_Init+0x172>
			}
			else
			{
				GPIOB->CRH &= ~(0b1111 << ((Pin->Pin-8) * 4) ) ;// Clear Bits
 80002a8:	4b59      	ldr	r3, [pc, #356]	; (8000410 <GPIO_Init+0x2a0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	3a08      	subs	r2, #8
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	210f      	movs	r1, #15
 80002b6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ba:	43d2      	mvns	r2, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a54      	ldr	r2, [pc, #336]	; (8000410 <GPIO_Init+0x2a0>)
 80002c0:	400b      	ands	r3, r1
 80002c2:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |=   (Pin->Mode << ((Pin->Pin-8) * 4) )   ;
 80002c4:	4b52      	ldr	r3, [pc, #328]	; (8000410 <GPIO_Init+0x2a0>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7892      	ldrb	r2, [r2, #2]
 80002cc:	4611      	mov	r1, r2
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	3a08      	subs	r2, #8
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	4611      	mov	r1, r2
 80002dc:	4a4c      	ldr	r2, [pc, #304]	; (8000410 <GPIO_Init+0x2a0>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	6053      	str	r3, [r2, #4]
			}
			// Handle Pull_Down and Pull_Up and Output initialized Values
			switch (Pin->Pull)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	795b      	ldrb	r3, [r3, #5]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d00d      	beq.n	8000306 <GPIO_Init+0x196>
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d17b      	bne.n	80003e6 <GPIO_Init+0x276>
			{
			case PULL_DOWN :
				GPIOB->ODR &= ~(BIT_MASK << Pin->Pin ) ;
 80002ee:	4b48      	ldr	r3, [pc, #288]	; (8000410 <GPIO_Init+0x2a0>)
 80002f0:	68da      	ldr	r2, [r3, #12]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4619      	mov	r1, r3
 80002f8:	2301      	movs	r3, #1
 80002fa:	408b      	lsls	r3, r1
 80002fc:	43db      	mvns	r3, r3
 80002fe:	4944      	ldr	r1, [pc, #272]	; (8000410 <GPIO_Init+0x2a0>)
 8000300:	4013      	ands	r3, r2
 8000302:	60cb      	str	r3, [r1, #12]
				break ;
 8000304:	e00a      	b.n	800031c <GPIO_Init+0x1ac>
			case PULL_UP :
				GPIOB->ODR |=(BIT_MASK << Pin->Pin ) ;
 8000306:	4b42      	ldr	r3, [pc, #264]	; (8000410 <GPIO_Init+0x2a0>)
 8000308:	68da      	ldr	r2, [r3, #12]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4619      	mov	r1, r3
 8000310:	2301      	movs	r3, #1
 8000312:	408b      	lsls	r3, r1
 8000314:	493e      	ldr	r1, [pc, #248]	; (8000410 <GPIO_Init+0x2a0>)
 8000316:	4313      	orrs	r3, r2
 8000318:	60cb      	str	r3, [r1, #12]
				break ;
 800031a:	bf00      	nop
				default :
			}

			break ;
 800031c:	e063      	b.n	80003e6 <GPIO_Init+0x276>
		case Port_C :
			vRCC_EnablePeripheralClock(RCC_APB2, IOC) ;
 800031e:	2104      	movs	r1, #4
 8000320:	2002      	movs	r0, #2
 8000322:	f000 fadf 	bl	80008e4 <vRCC_EnablePeripheralClock>
			if (Pin->Pin <= Pin_7)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b07      	cmp	r3, #7
 800032c:	d81b      	bhi.n	8000366 <GPIO_Init+0x1f6>
			{
				GPIOC->CRL &=~(0b1111 << (Pin->Pin * 4) ) ;// Clear Bits
 800032e:	4b39      	ldr	r3, [pc, #228]	; (8000414 <GPIO_Init+0x2a4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	7812      	ldrb	r2, [r2, #0]
 8000336:	0092      	lsls	r2, r2, #2
 8000338:	210f      	movs	r1, #15
 800033a:	fa01 f202 	lsl.w	r2, r1, r2
 800033e:	43d2      	mvns	r2, r2
 8000340:	4611      	mov	r1, r2
 8000342:	4a34      	ldr	r2, [pc, #208]	; (8000414 <GPIO_Init+0x2a4>)
 8000344:	400b      	ands	r3, r1
 8000346:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |=(Pin->Mode << (Pin->Pin * 4))   ;
 8000348:	4b32      	ldr	r3, [pc, #200]	; (8000414 <GPIO_Init+0x2a4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7892      	ldrb	r2, [r2, #2]
 8000350:	4611      	mov	r1, r2
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	7812      	ldrb	r2, [r2, #0]
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a2d      	ldr	r2, [pc, #180]	; (8000414 <GPIO_Init+0x2a4>)
 8000360:	430b      	orrs	r3, r1
 8000362:	6013      	str	r3, [r2, #0]
 8000364:	e01c      	b.n	80003a0 <GPIO_Init+0x230>
			}
			else
			{
				GPIOC->CRH &= ~(0b1111 << ((Pin->Pin-8) * 4) ) ; // Clear Bits
 8000366:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <GPIO_Init+0x2a4>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	7812      	ldrb	r2, [r2, #0]
 800036e:	3a08      	subs	r2, #8
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	210f      	movs	r1, #15
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a25      	ldr	r2, [pc, #148]	; (8000414 <GPIO_Init+0x2a4>)
 800037e:	400b      	ands	r3, r1
 8000380:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |=   (Pin->Mode << ((Pin->Pin-8) * 4) )   ;
 8000382:	4b24      	ldr	r3, [pc, #144]	; (8000414 <GPIO_Init+0x2a4>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7892      	ldrb	r2, [r2, #2]
 800038a:	4611      	mov	r1, r2
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	3a08      	subs	r2, #8
 8000392:	0092      	lsls	r2, r2, #2
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <GPIO_Init+0x2a4>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6053      	str	r3, [r2, #4]
			}
			// Handle Pull_Down and Pull_Up and Output   initialized Values
			switch (Pin->Pull)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d00d      	beq.n	80003c4 <GPIO_Init+0x254>
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d11e      	bne.n	80003ea <GPIO_Init+0x27a>
			{
			case PULL_DOWN :
				GPIOC->ODR &= ~(BIT_MASK << Pin->Pin ) ;
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <GPIO_Init+0x2a4>)
 80003ae:	68da      	ldr	r2, [r3, #12]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	2301      	movs	r3, #1
 80003b8:	408b      	lsls	r3, r1
 80003ba:	43db      	mvns	r3, r3
 80003bc:	4915      	ldr	r1, [pc, #84]	; (8000414 <GPIO_Init+0x2a4>)
 80003be:	4013      	ands	r3, r2
 80003c0:	60cb      	str	r3, [r1, #12]
				break ;
 80003c2:	e00a      	b.n	80003da <GPIO_Init+0x26a>
			case PULL_UP :
				GPIOC->ODR |=(BIT_MASK << Pin->Pin ) ;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <GPIO_Init+0x2a4>)
 80003c6:	68da      	ldr	r2, [r3, #12]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	2301      	movs	r3, #1
 80003d0:	408b      	lsls	r3, r1
 80003d2:	4910      	ldr	r1, [pc, #64]	; (8000414 <GPIO_Init+0x2a4>)
 80003d4:	4313      	orrs	r3, r2
 80003d6:	60cb      	str	r3, [r1, #12]
				break ;
 80003d8:	bf00      	nop
				default :
			}

			break ;
 80003da:	e006      	b.n	80003ea <GPIO_Init+0x27a>
		default :
			ret = R_NOK ;
 80003dc:	2301      	movs	r3, #1
 80003de:	73fb      	strb	r3, [r7, #15]
 80003e0:	e004      	b.n	80003ec <GPIO_Init+0x27c>
		break ;
 80003e2:	bf00      	nop
 80003e4:	e002      	b.n	80003ec <GPIO_Init+0x27c>
			break ;
 80003e6:	bf00      	nop
 80003e8:	e000      	b.n	80003ec <GPIO_Init+0x27c>
			break ;
 80003ea:	bf00      	nop
	}
}
// Initialize Output Pins Values
if (Pin->Direction == OUTPUT)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	78db      	ldrb	r3, [r3, #3]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d105      	bne.n	8000400 <GPIO_Init+0x290>
{

	GPIO_SetPinValue(Pin,Pin->State) ;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	4619      	mov	r1, r3
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f000 f80c 	bl	8000418 <GPIO_SetPinValue>

}
return ret ;
 8000400:	7bfb      	ldrb	r3, [r7, #15]

}
 8000402:	4618      	mov	r0, r3
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800
 8000410:	40010c00 	.word	0x40010c00
 8000414:	40011000 	.word	0x40011000

08000418 <GPIO_SetPinValue>:

return ret ;

}

state_type_t GPIO_SetPinValue(const PinConfig_t* Pin, State_t Value ){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
state_type_t ret = R_OK ;
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]

if (Pin->Direction == OUTPUT)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	78db      	ldrb	r3, [r3, #3]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d168      	bne.n	8000502 <GPIO_SetPinValue+0xea>
{
	if (SET == Value)
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d12e      	bne.n	8000494 <GPIO_SetPinValue+0x7c>
	{
		switch (Pin->Port)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	785b      	ldrb	r3, [r3, #1]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d01c      	beq.n	8000478 <GPIO_SetPinValue+0x60>
 800043e:	2b02      	cmp	r3, #2
 8000440:	dc25      	bgt.n	800048e <GPIO_SetPinValue+0x76>
 8000442:	2b00      	cmp	r3, #0
 8000444:	d002      	beq.n	800044c <GPIO_SetPinValue+0x34>
 8000446:	2b01      	cmp	r3, #1
 8000448:	d00b      	beq.n	8000462 <GPIO_SetPinValue+0x4a>
 800044a:	e020      	b.n	800048e <GPIO_SetPinValue+0x76>
		{
			case Port_A :
				GPIOA->ODR |= (BIT_MASK << Pin->Pin ) ;
 800044c:	4b30      	ldr	r3, [pc, #192]	; (8000510 <GPIO_SetPinValue+0xf8>)
 800044e:	68da      	ldr	r2, [r3, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	2301      	movs	r3, #1
 8000458:	408b      	lsls	r3, r1
 800045a:	492d      	ldr	r1, [pc, #180]	; (8000510 <GPIO_SetPinValue+0xf8>)
 800045c:	4313      	orrs	r3, r2
 800045e:	60cb      	str	r3, [r1, #12]
				break ;
 8000460:	e04f      	b.n	8000502 <GPIO_SetPinValue+0xea>
			case Port_B :
				GPIOB->ODR |= (BIT_MASK << Pin->Pin) ;
 8000462:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <GPIO_SetPinValue+0xfc>)
 8000464:	68da      	ldr	r2, [r3, #12]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4619      	mov	r1, r3
 800046c:	2301      	movs	r3, #1
 800046e:	408b      	lsls	r3, r1
 8000470:	4928      	ldr	r1, [pc, #160]	; (8000514 <GPIO_SetPinValue+0xfc>)
 8000472:	4313      	orrs	r3, r2
 8000474:	60cb      	str	r3, [r1, #12]
				break ;
 8000476:	e044      	b.n	8000502 <GPIO_SetPinValue+0xea>
			case Port_C :
				GPIOC->ODR |= (BIT_MASK << Pin->Pin) ;
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <GPIO_SetPinValue+0x100>)
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	2301      	movs	r3, #1
 8000484:	408b      	lsls	r3, r1
 8000486:	4924      	ldr	r1, [pc, #144]	; (8000518 <GPIO_SetPinValue+0x100>)
 8000488:	4313      	orrs	r3, r2
 800048a:	60cb      	str	r3, [r1, #12]
				break ;
 800048c:	e039      	b.n	8000502 <GPIO_SetPinValue+0xea>
			default :
				ret = R_NOK ;
 800048e:	2301      	movs	r3, #1
 8000490:	73fb      	strb	r3, [r7, #15]
 8000492:	e036      	b.n	8000502 <GPIO_SetPinValue+0xea>
		}
	}
	else if (RESET == Value)
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d131      	bne.n	80004fe <GPIO_SetPinValue+0xe6>
	{
		switch (Pin->Port)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	785b      	ldrb	r3, [r3, #1]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d01e      	beq.n	80004e0 <GPIO_SetPinValue+0xc8>
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	dc28      	bgt.n	80004f8 <GPIO_SetPinValue+0xe0>
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <GPIO_SetPinValue+0x98>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d00c      	beq.n	80004c8 <GPIO_SetPinValue+0xb0>
 80004ae:	e023      	b.n	80004f8 <GPIO_SetPinValue+0xe0>
		{
			case Port_A :
				GPIOA->ODR &= ~(BIT_MASK << Pin->Pin) ;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <GPIO_SetPinValue+0xf8>)
 80004b2:	68da      	ldr	r2, [r3, #12]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2301      	movs	r3, #1
 80004bc:	408b      	lsls	r3, r1
 80004be:	43db      	mvns	r3, r3
 80004c0:	4913      	ldr	r1, [pc, #76]	; (8000510 <GPIO_SetPinValue+0xf8>)
 80004c2:	4013      	ands	r3, r2
 80004c4:	60cb      	str	r3, [r1, #12]
				break ;
 80004c6:	e01c      	b.n	8000502 <GPIO_SetPinValue+0xea>
			case Port_B :
				GPIOB->ODR &= ~(BIT_MASK << (Pin->Pin)) ;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <GPIO_SetPinValue+0xfc>)
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	2301      	movs	r3, #1
 80004d4:	408b      	lsls	r3, r1
 80004d6:	43db      	mvns	r3, r3
 80004d8:	490e      	ldr	r1, [pc, #56]	; (8000514 <GPIO_SetPinValue+0xfc>)
 80004da:	4013      	ands	r3, r2
 80004dc:	60cb      	str	r3, [r1, #12]
				break ;
 80004de:	e010      	b.n	8000502 <GPIO_SetPinValue+0xea>
			case Port_C :
				GPIOC->ODR &= ~(BIT_MASK << Pin->Pin) ;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <GPIO_SetPinValue+0x100>)
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2301      	movs	r3, #1
 80004ec:	408b      	lsls	r3, r1
 80004ee:	43db      	mvns	r3, r3
 80004f0:	4909      	ldr	r1, [pc, #36]	; (8000518 <GPIO_SetPinValue+0x100>)
 80004f2:	4013      	ands	r3, r2
 80004f4:	60cb      	str	r3, [r1, #12]
				break ;
 80004f6:	e004      	b.n	8000502 <GPIO_SetPinValue+0xea>
			default :
				ret = R_NOK ;
 80004f8:	2301      	movs	r3, #1
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e001      	b.n	8000502 <GPIO_SetPinValue+0xea>
		}

	}
	else
	{
		ret = R_NOK ;
 80004fe:	2301      	movs	r3, #1
 8000500:	73fb      	strb	r3, [r7, #15]
	}
}

return ret ;
 8000502:	7bfb      	ldrb	r3, [r7, #15]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40010800 	.word	0x40010800
 8000514:	40010c00 	.word	0x40010c00
 8000518:	40011000 	.word	0x40011000

0800051c <GPIO_TogglePin>:
state_type_t GPIO_TogglePin(const PinConfig_t* Pin){
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
state_type_t ret = R_OK ;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
	if (Pin->Direction == OUTPUT)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	78db      	ldrb	r3, [r3, #3]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d12d      	bne.n	800058c <GPIO_TogglePin+0x70>
	{
			switch (Pin->Port)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	785b      	ldrb	r3, [r3, #1]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d01c      	beq.n	8000572 <GPIO_TogglePin+0x56>
 8000538:	2b02      	cmp	r3, #2
 800053a:	dc25      	bgt.n	8000588 <GPIO_TogglePin+0x6c>
 800053c:	2b00      	cmp	r3, #0
 800053e:	d002      	beq.n	8000546 <GPIO_TogglePin+0x2a>
 8000540:	2b01      	cmp	r3, #1
 8000542:	d00b      	beq.n	800055c <GPIO_TogglePin+0x40>
 8000544:	e020      	b.n	8000588 <GPIO_TogglePin+0x6c>
			{
				case Port_A :
					GPIOA->ODR ^= (BIT_MASK << Pin->Pin ) ;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <GPIO_TogglePin+0x7c>)
 8000548:	68da      	ldr	r2, [r3, #12]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	2301      	movs	r3, #1
 8000552:	408b      	lsls	r3, r1
 8000554:	4910      	ldr	r1, [pc, #64]	; (8000598 <GPIO_TogglePin+0x7c>)
 8000556:	4053      	eors	r3, r2
 8000558:	60cb      	str	r3, [r1, #12]
					break ;
 800055a:	e017      	b.n	800058c <GPIO_TogglePin+0x70>
				case Port_B :
					GPIOB->ODR ^= (BIT_MASK << Pin->Pin) ;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <GPIO_TogglePin+0x80>)
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	2301      	movs	r3, #1
 8000568:	408b      	lsls	r3, r1
 800056a:	490c      	ldr	r1, [pc, #48]	; (800059c <GPIO_TogglePin+0x80>)
 800056c:	4053      	eors	r3, r2
 800056e:	60cb      	str	r3, [r1, #12]
					break ;
 8000570:	e00c      	b.n	800058c <GPIO_TogglePin+0x70>
				case Port_C :
					GPIOC->ODR ^= (BIT_MASK << Pin->Pin) ;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <GPIO_TogglePin+0x84>)
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	2301      	movs	r3, #1
 800057e:	408b      	lsls	r3, r1
 8000580:	4907      	ldr	r1, [pc, #28]	; (80005a0 <GPIO_TogglePin+0x84>)
 8000582:	4053      	eors	r3, r2
 8000584:	60cb      	str	r3, [r1, #12]
					break ;
 8000586:	e001      	b.n	800058c <GPIO_TogglePin+0x70>
				default :
					ret = R_NOK ;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
			}
	}
	return ret ;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40010800 	.word	0x40010800
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	40011000 	.word	0x40011000

080005a4 <main>:
	.Mode=OUT_PUSH_PULL_10MHZ ,
	.Direction =OUTPUT,
	.State=SET
};
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	vRCC_Init(&SystemClockConfig);
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0x44>)
 80005ac:	f000 f834 	bl	8000618 <vRCC_Init>
	GPIO_Init(&Pin) ;
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <main+0x48>)
 80005b2:	f7ff fddd 	bl	8000170 <GPIO_Init>
	for (long long i=4 ; i>0 ; i--)
 80005b6:	f04f 0204 	mov.w	r2, #4
 80005ba:	f04f 0300 	mov.w	r3, #0
 80005be:	e9c7 2300 	strd	r2, r3, [r7]
 80005c2:	e009      	b.n	80005d8 <main+0x34>
	{
		GPIO_TogglePin(&Pin);
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x48>)
 80005c6:	f7ff ffa9 	bl	800051c <GPIO_TogglePin>
	for (long long i=4 ; i>0 ; i--)
 80005ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005ce:	1e54      	subs	r4, r2, #1
 80005d0:	f143 35ff 	adc.w	r5, r3, #4294967295
 80005d4:	e9c7 4500 	strd	r4, r5, [r7]
 80005d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005dc:	2a01      	cmp	r2, #1
 80005de:	f173 0300 	sbcs.w	r3, r3, #0
 80005e2:	daef      	bge.n	80005c4 <main+0x20>
	}
	for(;;);
 80005e4:	e7fe      	b.n	80005e4 <main+0x40>
 80005e6:	bf00      	nop
 80005e8:	08000a98 	.word	0x08000a98
 80005ec:	08000aa4 	.word	0x08000aa4

080005f0 <vRCC_SetHSI>:
	.Direction= OUTPUT
};
#ifdef HSI_CLK_ENABLED
static void vRCC_SetHSI(void) ;
static void vRCC_SetHSI(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->RCC_CR,HSION) ; // Enable 8 MHZ Internal RC
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <vRCC_SetHSI+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vRCC_SetHSI+0x24>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6013      	str	r3, [r2, #0]
	vRCC_WaitForHSIStable()    ; // wait for it to be Ready
 8000600:	f000 f9a8 	bl	8000954 <vRCC_WaitForHSIStable>
	// Bits of HSICAL initialized automatically at startup

#ifdef TRIMMING_ENABLED // Trimming it
	RCC->RCC_CR |= (TRIMVAL << HSITRIM) ;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <vRCC_SetHSI+0x24>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a02      	ldr	r2, [pc, #8]	; (8000614 <vRCC_SetHSI+0x24>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060e:	6013      	str	r3, [r2, #0]
#endif
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <vRCC_Init>:

// -----------------------------------------------

// Functions Implementation
void vRCC_Init(const RCCConfig_t* RCCconfig)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	GPIO_Init(&MCO_Pin) ;
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <vRCC_Init+0x40>)
 8000622:	f7ff fda5 	bl	8000170 <GPIO_Init>
	  // enable all clocks enabled from configurations File
vRCC_EnableMCO(RCCconfig->MCO_OutSrc) ;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7a1b      	ldrb	r3, [r3, #8]
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f9a2 	bl	8000974 <vRCC_EnableMCO>
FlASH_ACR |= (RCC_FLASH_LATENCY << LATENCY_OFFSET) ;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <vRCC_Init+0x44>)
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <vRCC_Init+0x44>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	6013      	str	r3, [r2, #0]

	vRCC_SetHSE() ;
#endif

#ifdef HSI_CLK_ENABLED
	vRCC_SetHSI();
 8000638:	f7ff ffda 	bl	80005f0 <vRCC_SetHSI>
#endif
#if PLL_CLK_ENABLED
	vRCC_SetPLL() ;
#endif
vRCC_SetSystemClock(
			RCCconfig->sysClkSource,
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7818      	ldrb	r0, [r3, #0]
			RCCconfig->AHBPrescaler,
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	8859      	ldrh	r1, [r3, #2]
			RCCconfig->APB1Prescaler,
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	889a      	ldrh	r2, [r3, #4]
			RCCconfig->APB2Prescaler);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	88db      	ldrh	r3, [r3, #6]
vRCC_SetSystemClock(
 800064c:	f000 f808 	bl	8000660 <vRCC_SetSystemClock>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	08000aac 	.word	0x08000aac
 800065c:	40022000 	.word	0x40022000

08000660 <vRCC_SetSystemClock>:


void vRCC_SetSystemClock(CLK_t sysClkSource, PRE_t AHBPrescaler, PRE_t APB1Prescaler, PRE_t APB2Prescaler)
{
 8000660:	b490      	push	{r4, r7}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4604      	mov	r4, r0
 8000668:	4608      	mov	r0, r1
 800066a:	4611      	mov	r1, r2
 800066c:	461a      	mov	r2, r3
 800066e:	4623      	mov	r3, r4
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	4603      	mov	r3, r0
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	807b      	strh	r3, [r7, #2]
 800067a:	4613      	mov	r3, r2
 800067c:	803b      	strh	r3, [r7, #0]

switch (AHBPrescaler)
 800067e:	88bb      	ldrh	r3, [r7, #4]
 8000680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000684:	d06f      	beq.n	8000766 <vRCC_SetSystemClock+0x106>
 8000686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800068a:	dc73      	bgt.n	8000774 <vRCC_SetSystemClock+0x114>
 800068c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000690:	d062      	beq.n	8000758 <vRCC_SetSystemClock+0xf8>
 8000692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000696:	dc6d      	bgt.n	8000774 <vRCC_SetSystemClock+0x114>
 8000698:	2b80      	cmp	r3, #128	; 0x80
 800069a:	d056      	beq.n	800074a <vRCC_SetSystemClock+0xea>
 800069c:	2b80      	cmp	r3, #128	; 0x80
 800069e:	dc69      	bgt.n	8000774 <vRCC_SetSystemClock+0x114>
 80006a0:	2b10      	cmp	r3, #16
 80006a2:	dc27      	bgt.n	80006f4 <vRCC_SetSystemClock+0x94>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dd65      	ble.n	8000774 <vRCC_SetSystemClock+0x114>
 80006a8:	3b01      	subs	r3, #1
 80006aa:	2b0f      	cmp	r3, #15
 80006ac:	d862      	bhi.n	8000774 <vRCC_SetSystemClock+0x114>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <vRCC_SetSystemClock+0x54>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006fb 	.word	0x080006fb
 80006b8:	08000705 	.word	0x08000705
 80006bc:	08000775 	.word	0x08000775
 80006c0:	08000713 	.word	0x08000713
 80006c4:	08000775 	.word	0x08000775
 80006c8:	08000775 	.word	0x08000775
 80006cc:	08000775 	.word	0x08000775
 80006d0:	08000721 	.word	0x08000721
 80006d4:	08000775 	.word	0x08000775
 80006d8:	08000775 	.word	0x08000775
 80006dc:	08000775 	.word	0x08000775
 80006e0:	08000775 	.word	0x08000775
 80006e4:	08000775 	.word	0x08000775
 80006e8:	08000775 	.word	0x08000775
 80006ec:	08000775 	.word	0x08000775
 80006f0:	0800072f 	.word	0x0800072f
 80006f4:	2b40      	cmp	r3, #64	; 0x40
 80006f6:	d021      	beq.n	800073c <vRCC_SetSystemClock+0xdc>
 80006f8:	e03c      	b.n	8000774 <vRCC_SetSystemClock+0x114>
	 {
		case NO_DIV :
			(RCC->RCC_CFGR) |= (SYSCLK_NO_DIV << HPRE_OFFSET) ;
 80006fa:	4b79      	ldr	r3, [pc, #484]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80006fc:	4a78      	ldr	r2, [pc, #480]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	6053      	str	r3, [r2, #4]
			break ;
 8000702:	e037      	b.n	8000774 <vRCC_SetSystemClock+0x114>
		case DIV_2 :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV2 << HPRE_OFFSET) ;
 8000704:	4b76      	ldr	r3, [pc, #472]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a75      	ldr	r2, [pc, #468]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070e:	6053      	str	r3, [r2, #4]
			break ;
 8000710:	e030      	b.n	8000774 <vRCC_SetSystemClock+0x114>
		case DIV_4 :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV4 << HPRE_OFFSET) ;
 8000712:	4b73      	ldr	r3, [pc, #460]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4a72      	ldr	r2, [pc, #456]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000718:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800071c:	6053      	str	r3, [r2, #4]
			break ;
 800071e:	e029      	b.n	8000774 <vRCC_SetSystemClock+0x114>
		case DIV_8 :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV8 << HPRE_OFFSET) ;
 8000720:	4b6f      	ldr	r3, [pc, #444]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a6e      	ldr	r2, [pc, #440]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000726:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800072a:	6053      	str	r3, [r2, #4]
			break ;
 800072c:	e022      	b.n	8000774 <vRCC_SetSystemClock+0x114>
		case DIV_16 :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV16 << HPRE_OFFSET) ;
 800072e:	4b6c      	ldr	r3, [pc, #432]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a6b      	ldr	r2, [pc, #428]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000734:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000738:	6053      	str	r3, [r2, #4]
			break ;
 800073a:	e01b      	b.n	8000774 <vRCC_SetSystemClock+0x114>
	   	case DIV_64 :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV64 << HPRE_OFFSET) ;
 800073c:	4b68      	ldr	r3, [pc, #416]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a67      	ldr	r2, [pc, #412]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000746:	6053      	str	r3, [r2, #4]
	   		break ;
 8000748:	e014      	b.n	8000774 <vRCC_SetSystemClock+0x114>
	   	case DIV_128 :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV128 << HPRE_OFFSET) ;
 800074a:	4b65      	ldr	r3, [pc, #404]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	4a64      	ldr	r2, [pc, #400]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000750:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000754:	6053      	str	r3, [r2, #4]
	   		break ;
 8000756:	e00d      	b.n	8000774 <vRCC_SetSystemClock+0x114>
	 	case DIV_256  :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV256 << HPRE_OFFSET) ;
 8000758:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a60      	ldr	r2, [pc, #384]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800075e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000762:	6053      	str	r3, [r2, #4]
	 		break ;
 8000764:	e006      	b.n	8000774 <vRCC_SetSystemClock+0x114>
		case DIV_512  :
			(RCC->RCC_CFGR) |= (SYSCLK_DIV512 << HPRE_OFFSET) ;
 8000766:	4b5e      	ldr	r3, [pc, #376]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	4a5d      	ldr	r2, [pc, #372]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800076c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000770:	6053      	str	r3, [r2, #4]
			break ;
 8000772:	bf00      	nop
		default :
			// error detection
	 }
switch (APB1Prescaler)
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	3b01      	subs	r3, #1
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d844      	bhi.n	8000806 <vRCC_SetSystemClock+0x1a6>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <vRCC_SetSystemClock+0x124>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	080007c5 	.word	0x080007c5
 8000788:	080007cf 	.word	0x080007cf
 800078c:	08000807 	.word	0x08000807
 8000790:	080007dd 	.word	0x080007dd
 8000794:	08000807 	.word	0x08000807
 8000798:	08000807 	.word	0x08000807
 800079c:	08000807 	.word	0x08000807
 80007a0:	080007eb 	.word	0x080007eb
 80007a4:	08000807 	.word	0x08000807
 80007a8:	08000807 	.word	0x08000807
 80007ac:	08000807 	.word	0x08000807
 80007b0:	08000807 	.word	0x08000807
 80007b4:	08000807 	.word	0x08000807
 80007b8:	08000807 	.word	0x08000807
 80007bc:	08000807 	.word	0x08000807
 80007c0:	080007f9 	.word	0x080007f9
	 {
	    case NO_DIV :
	    	(RCC->RCC_CFGR) |= (HCLK_NO_DIV << PPRE1_OFFSET) ;
 80007c4:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007c6:	4a46      	ldr	r2, [pc, #280]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	6053      	str	r3, [r2, #4]
	    	break ;
 80007cc:	e01b      	b.n	8000806 <vRCC_SetSystemClock+0x1a6>
	    case DIV_2 :
	    	(RCC->RCC_CFGR) |= (HCLK_DIV2 << PPRE1_OFFSET) ;
 80007ce:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4a43      	ldr	r2, [pc, #268]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007d8:	6053      	str	r3, [r2, #4]
	    	break ;
 80007da:	e014      	b.n	8000806 <vRCC_SetSystemClock+0x1a6>
	   	case DIV_4 :
	   		(RCC->RCC_CFGR) |= (HCLK_DIV4 << PPRE1_OFFSET) ;
 80007dc:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4a3f      	ldr	r2, [pc, #252]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007e2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80007e6:	6053      	str	r3, [r2, #4]
	   		break ;
 80007e8:	e00d      	b.n	8000806 <vRCC_SetSystemClock+0x1a6>
	   	case DIV_8 :
	   		(RCC->RCC_CFGR) |= (HCLK_DIV8 << PPRE1_OFFSET) ;
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a3c      	ldr	r2, [pc, #240]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007f0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80007f4:	6053      	str	r3, [r2, #4]
	   		break ;
 80007f6:	e006      	b.n	8000806 <vRCC_SetSystemClock+0x1a6>
	   	case DIV_16 :
	   		(RCC->RCC_CFGR) |= (HCLK_DIV16 << PPRE1_OFFSET) ;
 80007f8:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	4a38      	ldr	r2, [pc, #224]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80007fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000802:	6053      	str	r3, [r2, #4]
	   		break ;
 8000804:	bf00      	nop
	   	default :
	   		// Error Detection

	 }
switch (APB2Prescaler)
 8000806:	883b      	ldrh	r3, [r7, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d843      	bhi.n	8000896 <vRCC_SetSystemClock+0x236>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <vRCC_SetSystemClock+0x1b4>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	08000855 	.word	0x08000855
 8000818:	0800085f 	.word	0x0800085f
 800081c:	08000897 	.word	0x08000897
 8000820:	0800086d 	.word	0x0800086d
 8000824:	08000897 	.word	0x08000897
 8000828:	08000897 	.word	0x08000897
 800082c:	08000897 	.word	0x08000897
 8000830:	0800087b 	.word	0x0800087b
 8000834:	08000897 	.word	0x08000897
 8000838:	08000897 	.word	0x08000897
 800083c:	08000897 	.word	0x08000897
 8000840:	08000897 	.word	0x08000897
 8000844:	08000897 	.word	0x08000897
 8000848:	08000897 	.word	0x08000897
 800084c:	08000897 	.word	0x08000897
 8000850:	08000889 	.word	0x08000889
	 {
	case NO_DIV :
		(RCC->RCC_CFGR) |= (HCLK_NO_DIV << PPRE2_OFFSET) ;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	6053      	str	r3, [r2, #4]
		break ;
 800085c:	e01b      	b.n	8000896 <vRCC_SetSystemClock+0x236>
	case DIV_2 :
		(RCC->RCC_CFGR) |= (HCLK_DIV2 << PPRE2_OFFSET) ;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000868:	6053      	str	r3, [r2, #4]
		break ;
 800086a:	e014      	b.n	8000896 <vRCC_SetSystemClock+0x236>
	case DIV_4 :
		(RCC->RCC_CFGR) |= (HCLK_DIV4 << PPRE2_OFFSET) ;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000872:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000876:	6053      	str	r3, [r2, #4]
		break ;
 8000878:	e00d      	b.n	8000896 <vRCC_SetSystemClock+0x236>
	case DIV_8 :
		(RCC->RCC_CFGR) |= (HCLK_DIV8 << PPRE2_OFFSET) ;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 8000880:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000884:	6053      	str	r3, [r2, #4]
		break ;
 8000886:	e006      	b.n	8000896 <vRCC_SetSystemClock+0x236>
	case DIV_16 :
		(RCC->RCC_CFGR) |= (HCLK_DIV16 << PPRE2_OFFSET) ;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800088e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000892:	6053      	str	r3, [r2, #4]
		break ;
 8000894:	bf00      	nop
	default :
		// error detection
	 }


 if (sysClkSource == HSE )
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d106      	bne.n	80008aa <vRCC_SetSystemClock+0x24a>
 {
	 RCC->RCC_CFGR |=(HSE_SYSCLK << SW_OFFSET ) ;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6053      	str	r3, [r2, #4]
 80008a8:	e010      	b.n	80008cc <vRCC_SetSystemClock+0x26c>

 }
 else if (sysClkSource == HSI)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d104      	bne.n	80008ba <vRCC_SetSystemClock+0x25a>
 {
	 RCC->RCC_CFGR |=(HSI_SYSCLK << SW_OFFSET ) ;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	6053      	str	r3, [r2, #4]
 80008b8:	e008      	b.n	80008cc <vRCC_SetSystemClock+0x26c>
 }
 else if (sysClkSource == PLL)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d105      	bne.n	80008cc <vRCC_SetSystemClock+0x26c>
 {
	 RCC->RCC_CFGR |=(PLL_SYSCLK << SW_OFFSET );
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	6053      	str	r3, [r2, #4]
 }
 else
 {
	 // Error Detection
 }
 RCC->RCC_CFGR |=(ADC_Prescalar << ADCPRE_OFFSET) ; // Set ADC Prescalar
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <vRCC_SetSystemClock+0x280>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	6053      	str	r3, [r2, #4]
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc90      	pop	{r4, r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <vRCC_EnablePeripheralClock>:

void vRCC_EnablePeripheralClock(Bus_t BusName , Peripheral_t PeripheralName )
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
switch (BusName)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d01a      	beq.n	8000930 <vRCC_EnablePeripheralClock+0x4c>
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dc22      	bgt.n	8000944 <vRCC_EnablePeripheralClock+0x60>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <vRCC_EnablePeripheralClock+0x24>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00a      	beq.n	800091c <vRCC_EnablePeripheralClock+0x38>
	default :
		{
			// To detect errors
		}
}
}
 8000906:	e01d      	b.n	8000944 <vRCC_EnablePeripheralClock+0x60>
			SET_BIT(RCC->RCC_AHBENR,PeripheralName) ;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <vRCC_EnablePeripheralClock+0x6c>)
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	490e      	ldr	r1, [pc, #56]	; (8000950 <vRCC_EnablePeripheralClock+0x6c>)
 8000916:	4313      	orrs	r3, r2
 8000918:	614b      	str	r3, [r1, #20]
			break;
 800091a:	e013      	b.n	8000944 <vRCC_EnablePeripheralClock+0x60>
			SET_BIT(RCC->RCC_APB1ENR,PeripheralName) ;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <vRCC_EnablePeripheralClock+0x6c>)
 800091e:	69da      	ldr	r2, [r3, #28]
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	4909      	ldr	r1, [pc, #36]	; (8000950 <vRCC_EnablePeripheralClock+0x6c>)
 800092a:	4313      	orrs	r3, r2
 800092c:	61cb      	str	r3, [r1, #28]
			break;
 800092e:	e009      	b.n	8000944 <vRCC_EnablePeripheralClock+0x60>
			SET_BIT(RCC->RCC_APB2ENR,PeripheralName) ;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <vRCC_EnablePeripheralClock+0x6c>)
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	4904      	ldr	r1, [pc, #16]	; (8000950 <vRCC_EnablePeripheralClock+0x6c>)
 800093e:	4313      	orrs	r3, r2
 8000940:	618b      	str	r3, [r1, #24]
			break ;
 8000942:	bf00      	nop
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <vRCC_WaitForHSIStable>:
		}
	}
}

static inline void vRCC_WaitForHSIStable(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	while (RESET == RETURN_BIT(RCC->RCC_CR,HSIRDY)) ;
 8000958:	bf00      	nop
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <vRCC_WaitForHSIStable+0x1c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f9      	beq.n	800095a <vRCC_WaitForHSIStable+0x6>

}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <vRCC_EnableMCO>:
{
	while (RESET == RETURN_BIT(RCC->RCC_CR,PLLRDY)) ;
}

void vRCC_EnableMCO(Out_MCO_t OutCLK)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]

if (OutCLK == Out_SYSCLK )
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d106      	bne.n	8000992 <vRCC_EnableMCO+0x1e>
{
// Make Sure The Clock not exceed 50 MHZ
RCC->RCC_CFGR |= ((MCO_SYSCLK << MCO_OFFSET)) ;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 800098a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800098e:	6053      	str	r3, [r2, #4]
}
else
{
	RCC->RCC_CFGR |= ((MCO_NO_CLK	<<	MCO_OFFSET)) ;
}
}
 8000990:	e021      	b.n	80009d6 <vRCC_EnableMCO+0x62>
else if (OutCLK == Out_HSE )
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d106      	bne.n	80009a6 <vRCC_EnableMCO+0x32>
	RCC->RCC_CFGR |= ((MCO_HSE	<<	MCO_OFFSET)) ;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 800099e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80009a2:	6053      	str	r3, [r2, #4]
}
 80009a4:	e017      	b.n	80009d6 <vRCC_EnableMCO+0x62>
else if (OutCLK == Out_HSI)
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d106      	bne.n	80009ba <vRCC_EnableMCO+0x46>
	RCC->RCC_CFGR |= ((MCO_HSI << MCO_OFFSET)) ;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 80009b2:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80009b6:	6053      	str	r3, [r2, #4]
}
 80009b8:	e00d      	b.n	80009d6 <vRCC_EnableMCO+0x62>
else if (OutCLK == Out_PLL_Div_2)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d106      	bne.n	80009ce <vRCC_EnableMCO+0x5a>
	RCC->RCC_CFGR |= ((MCO_PLL_DIV_2	<<	MCO_OFFSET)) ;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 80009c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009ca:	6053      	str	r3, [r2, #4]
}
 80009cc:	e003      	b.n	80009d6 <vRCC_EnableMCO+0x62>
	RCC->RCC_CFGR |= ((MCO_NO_CLK	<<	MCO_OFFSET)) ;
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <vRCC_EnableMCO+0x6c>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	6053      	str	r3, [r2, #4]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a12:	f000 f811 	bl	8000a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fdc5 	bl	80005a4 <main>

08000a1a <LoopForever>:

LoopForever:
  b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a28:	08000abc 	.word	0x08000abc
  ldr r2, =_sbss
 8000a2c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a30:	2000001c 	.word	0x2000001c

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <__libc_init_array>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	4d0c      	ldr	r5, [pc, #48]	; (8000a70 <__libc_init_array+0x38>)
 8000a3e:	4c0d      	ldr	r4, [pc, #52]	; (8000a74 <__libc_init_array+0x3c>)
 8000a40:	1b64      	subs	r4, r4, r5
 8000a42:	10a4      	asrs	r4, r4, #2
 8000a44:	42a6      	cmp	r6, r4
 8000a46:	d109      	bne.n	8000a5c <__libc_init_array+0x24>
 8000a48:	f000 f81a 	bl	8000a80 <_init>
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	4d0a      	ldr	r5, [pc, #40]	; (8000a78 <__libc_init_array+0x40>)
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <__libc_init_array+0x44>)
 8000a52:	1b64      	subs	r4, r4, r5
 8000a54:	10a4      	asrs	r4, r4, #2
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d105      	bne.n	8000a66 <__libc_init_array+0x2e>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a60:	4798      	blx	r3
 8000a62:	3601      	adds	r6, #1
 8000a64:	e7ee      	b.n	8000a44 <__libc_init_array+0xc>
 8000a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6a:	4798      	blx	r3
 8000a6c:	3601      	adds	r6, #1
 8000a6e:	e7f2      	b.n	8000a56 <__libc_init_array+0x1e>
 8000a70:	08000ab4 	.word	0x08000ab4
 8000a74:	08000ab4 	.word	0x08000ab4
 8000a78:	08000ab4 	.word	0x08000ab4
 8000a7c:	08000ab8 	.word	0x08000ab8

08000a80 <_init>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr

08000a8c <_fini>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	bf00      	nop
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr
